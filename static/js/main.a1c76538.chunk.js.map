{"version":3,"sources":["stuff/universe.ts","setter.tsx","Resources.ts","stuff/tasks.ts","components/section.tsx","components/action.tsx","components/ball.tsx","components/planet.tsx","components/system.tsx","images/mercuryimg.png","stages/SolarSystem.tsx","images/earthimg.png","images/moonimg.png","stages/EarthStage.tsx","components/tabs.tsx","simplified/galaxy.ts","simplified/probe.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BILLION","ROUND","n","scale","Math","round","Setter","value","icon_","onChange","newValue","this","icon","v","MONTH","DateSetter","year","whole","floor","fraction","month","Months","EnsureDigits","AsDate","current","Add","Year","Research","Money","Budget","setInterval","AddMonth","Sun","planets","planet","incomingProbes","filter","incomingProbe","arrivalYear","availableProbes","push","UpdateProbes","ManufacturingQueue","update","ResearchQueue","TelescopeQueue","ProbeQueue","Task","id","startYear","endYear","callback","isComplete","callbacks","addOnComplete","currentYear","forEach","c","getProgress","percent","TaskQueue","limitPerId","limitPerQueue","queue","onchange","task","i","length","splice","hasChanged","completedTask","shift","complete","t","backgroundColor","border","Section","title","children","unlocked","style","borderBottom","marginBottom","marginTop","paddingBottom","SectionHeader","props","fontSize","size","Block","padding","margin","SimpleAction","hasEnoughMoney","money","hasEnoughResearch","research","canAfford","name","description","StatRow","stat","unit","color","undefined","time","blocked","cursor","disabled","onClick","Subtract","onBuy","buyText","TaskProgressBar","height","width","percentWidth","QueuedBlockingAction","count","onComplete","get","map","BallView","obj","blur","position","img","borderRadius","src","top","left","randomLetter","charAt","random","createName","displayValue","isNaN","Number","PlanetBallView","picture","ResearchStat","studied","PlanetView","React","useState","discovered","display","flexDirection","mass","diameter","type","System","maxDistance","maxDiameter","star","max","distance","console","log","flex","marginRight","p","PositionBallView","index","maxIndex","testDist","pow","Earth","age","percentUtilization","fullyUtilized","moons","temperature","soil","water","atmosphere","death","mercuryimg","SolarSystem","EarthStage","Probes","EarthManufacturing","ResearchStore","manufactureDate","Tabs","startTab","selected","setSelected","tablist","tabs","tab","locked","borderTop","content","GalaxyContainer","totalStars","techtree","probeProducingStars","runningProbes","launchedProbes","activeProbes","min","newProbes","probesPer100Years","interstarYears","yearsToCreateAProbeFromDiscovery","successfulProbes","successRate","Trait","researchLevels","level","isMaxed","MilkyWay","researchSent","App","setYear","Register","setResearch","setMoney","budget","setBudget","setQueues","triggerQueues","run1000Years","run100Years","galaxyStuff","unexploredPlanets","minHeight","fontFamily","date","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1c76538.chunk.js","sourcesContent":["import { PlanetResearch } from \"../stages/SolarSystem\";\r\n\r\nexport const MILLION = 1000 * 1000;\r\nexport const BILLION = 1000 * MILLION;\r\n\r\nexport function ROUND(n: number, scale = 10){\r\n    return Math.round(n * scale) / scale;\r\n}\r\n\r\nexport interface Probe {\r\n    //speed: number;\r\n    //startingDistance: number;\r\n    //remainingDistance: number;\r\n\r\n    manufactureDate: number,\r\n    launchYear?: number,\r\n    arrivalYear?: number,\r\n\r\n    // TODO: what stuff is like.. on it? etc.. OH well skip it for now...\r\n    // add like camera quality and STUFF.    \r\n}\r\n\r\nexport interface Telescope {\r\n    manufactureDate: number,\r\n    launchYear?: number,\r\n    quality?: \"blurry\" | \"ok\" | \"good\" | \"excellent\",\r\n    type: \"ground\" | \"space\",\r\n    condition: number,\r\n}\r\n\r\nexport interface SpaceObject {\r\n    name?: string;\r\n    mass?: number;\r\n    diameter?: number;\r\n    color?: string;\r\n    img?: string;\r\n}\r\n\r\nexport interface Planet extends SpaceObject {\r\n    // TODO: add stuff here\r\n    // mostly need energy SOOO what affects that?\r\n    \r\n    /** Distance from the star(s) in the system. This is the main driver of solar energy. */\r\n    distance: number;\r\n\r\n    /** Affects how you can extract resources and energy. */\r\n    type: \"rocky\" | \"venuslike\" | \"earthlike\" | \"superearth\" | \"gasgiant\";\r\n\r\n    age?: number;\r\n\r\n    /** how utilized the planet is. */\r\n    percentUtilization: number;\r\n\r\n    fullyUtilized: boolean;\r\n\r\n    incomingProbes: Probe[];\r\n    availableProbes: Probe[];\r\n\r\n    availableTelescopes?: Telescope[];\r\n\r\n    moons?: Planet[];\r\n\r\n    research?: PlanetResearch;\r\n}\r\n\r\nexport interface Star extends SpaceObject  {\r\n    /** Distance from initial system in light years */\r\n    distance: number;\r\n\r\n    /** Mass is the main driver for the output of the star. */\r\n    mass: number;\r\n\r\n    /** This is redundant based on mass and age but of well */\r\n    type: \"brown dwarf\" | \"smallred\" | \"sunlike\" | \"massivestar\" | \"supermassivestar\" | \"redgiant\" | \"binary\" | \"tertiary\";\r\n\r\n    /** how old the star is. */\r\n    age: number;\r\n\r\n    /** Expected time of death */\r\n    death: number;\r\n\r\n    /** Everything that orbits the star */\r\n    planets: Planet[];\r\n\r\n    incomingProbes: Probe[];\r\n}\r\n\r\nexport interface Galaxy {\r\n    /** distance from the initial galaxy in light years */\r\n    distance: number;\r\n\r\n    totalStars: number;\r\n\r\n    discoveredStars: Star[];\r\n    exploredStars: Star[];\r\n\r\n    incomingProbes: Probe[];\r\n}\r\n\r\nexport interface Universe {\r\n    totalGalaxies: number;\r\n    \r\n    discoveredGalaxies: Galaxy[];\r\n    exploredGalaxies: Galaxy[];\r\n}","import { ROUND } from \"./stuff/universe\";\r\n\r\nexport class Setter {\r\n    constructor(private value: number, private icon_ = '') { }\r\n\r\n    onChange = (newValue: number) => { }\r\n\r\n    Register(onChange: (newValue: number) => void) {\r\n        this.onChange = onChange;\r\n    }\r\n\r\n    get current() {\r\n        return this.value;\r\n    }\r\n\r\n    get icon(){\r\n        return this.icon_;\r\n    }\r\n\r\n    Display():string {\r\n        return ROUND(this.value) + this.icon;\r\n    }\r\n\r\n    Set(v: number) {\r\n        this.value = v;\r\n        this.onChange(this.value);\r\n    }\r\n\r\n    Add(v: number) {\r\n        this.value += v;\r\n        this.onChange(this.value);\r\n    }\r\n\r\n    Subtract(v: number) {\r\n        this.value -= v;\r\n        this.onChange(this.value);\r\n    }\r\n}\r\n\r\nexport const MONTH = 1/12;\r\nexport class DateSetter extends Setter {\r\n    static Months = [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec',\r\n    ];\r\n\r\n    AsDate(){\r\n       return AsDate(this.current, this.icon);\r\n    }\r\n\r\n    get date(){\r\n        return this.AsDate();\r\n    }\r\n\r\n    AddMonth(){\r\n        this.Add(MONTH);\r\n    }\r\n    AddYear(){\r\n        this.Add(1);\r\n    }\r\n\r\n    constructor(value = 1980, icon = '📅'){\r\n        super(value, icon);\r\n    }\r\n}\r\n\r\nexport function AsDate(year: number, icon = '📅'){\r\n    const whole = Math.floor(year);\r\n    const fraction = year - whole;\r\n    const month = Math.floor(fraction * 12);\r\n    const name = DateSetter.Months[month];\r\n    return `${whole}-${EnsureDigits(month+1)} ${icon}`;\r\n}\r\n\r\nexport function EnsureDigits(n: number){\r\n    if(n < 10){\r\n        return '0' + n;\r\n    }\r\n    return '' + n;\r\n}","import { DateSetter, Setter } from \"./setter\";\r\nimport { ManufacturingQueue, ProbeQueue, ResearchQueue, TelescopeQueue } from \"./stages/EarthStage\";\r\nimport { Sun } from \"./stages/SolarSystem\";\r\n\r\nexport const Y_ICON = '📅';\r\nexport const R_ICON = '🧪';\r\nexport const M_ICON = '💲';\r\nexport const B_ICON = '📈';\r\n\r\nexport const Year = new DateSetter(2000);\r\nexport const Research = new Setter(0, '🧪');\r\nexport const Money = new Setter(1, '💲');\r\nexport const Budget = new Setter(.1, '📈');\r\n\r\nsetInterval(() => {\r\n    Year.AddMonth();\r\n    UpdateProbes(); // TODP: make this a queue too\r\n\r\n    // TODO: could make all queues auto-update on creation...\r\n    ManufacturingQueue.update(Year.current);\r\n    ResearchQueue.update(Year.current);\r\n    TelescopeQueue.update(Year.current);\r\n    ProbeQueue.update(Year.current);\r\n\r\n    Money.Add(Budget.current);\r\n}, 2000);\r\n\r\nfunction UpdateProbes() {\r\n    for (const planet of Sun.planets) {\r\n        planet.incomingProbes = planet.incomingProbes.filter(incomingProbe => {\r\n            const hasArrived = incomingProbe.arrivalYear! <= Year.current;\r\n            if (hasArrived) {\r\n                // get 1 science on arrival!\r\n                Research.Add(1);\r\n                planet.availableProbes.push(incomingProbe);\r\n                return false;\r\n            }\r\n\r\n            //still on its way\r\n            return true;\r\n        })\r\n    }\r\n}","import { Year } from \"../Resources\";\r\nimport { ROUND } from \"./universe\";\r\n\r\nexport class Task {\r\n    isComplete = false;\r\n    callbacks: (() => void)[] = [];\r\n\r\n    constructor(\r\n        public readonly id: string,\r\n        public readonly startYear: number,\r\n        public readonly endYear: number,\r\n        callback?: () => void\r\n    ) {\r\n        if (callback) {\r\n            this.addOnComplete(callback);\r\n        }\r\n    }\r\n\r\n    getProgress(currentYear: number) {\r\n        if (this.isComplete) { return 1; }\r\n        return (currentYear - this.startYear) / (this.endYear - this.startYear);\r\n    }\r\n\r\n    get percent() {\r\n        return ROUND(this.getProgress(Year.current) * 100, 100);\r\n    }\r\n\r\n    get percentWidth() {\r\n        return `${this.percent}%`;\r\n    }\r\n\r\n    addOnComplete(callback: () => void) {\r\n        this.callbacks.push(callback);\r\n    }\r\n\r\n    complete(currentYear: number) {\r\n        if (this.isComplete) { return true; }\r\n        if (currentYear >= this.endYear && !this.isComplete) {\r\n            this.isComplete = true;\r\n            this.callbacks.forEach(c => c());\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class TaskQueue {\r\n    private queue: Task[] = [];\r\n\r\n    // TODO: control how these can be modified\r\n    constructor(public limitPerId?: number, public limitPerQueue?: number) { }\r\n\r\n    private onChange = () => {};\r\n    Register(onchange: () => void) {\r\n        this.onChange = onchange;\r\n    }\r\n\r\n    push(task: Task): Task {\r\n        // TODO: enforce the limits!\r\n        // add in SORTED order\r\n        let i = 0;\r\n        while (i < this.queue.length && this.queue[i].endYear < task.endYear) {\r\n            i++;\r\n        }\r\n        this.queue.splice(i, 0, task);\r\n        this.onChange();\r\n        return task;\r\n    }\r\n\r\n    update(year: number) {\r\n        let hasChanged = false;\r\n        // check first items until they are all done\r\n        while (this.queue.length && this.queue[0].endYear <= year) {\r\n            const completedTask = this.queue.shift();\r\n            completedTask?.complete(year);\r\n            hasChanged = true;\r\n        }\r\n        if (hasChanged) {\r\n            this.onChange();\r\n        }\r\n    }\r\n\r\n    get length() {\r\n        return this.queue.length;\r\n    }\r\n\r\n    count(id: string) {\r\n        return this.queue.filter(t => t.id === id).length;\r\n    }\r\n\r\n    get(id: string): Task[] {\r\n        return this.queue.filter(t => t.id === id)\r\n    }\r\n}","import React from 'react';\r\n\r\nexport const backgroundColor = \"grey\";\r\nexport const border = `2px solid ${backgroundColor}`;\r\nexport const margin = 5;\r\nexport const padding = margin;\r\nexport const marginTop = margin;\r\nexport const marginBottom = margin;\r\nexport const paddingBottom = margin;\r\nexport const titleFontSize = '125%';\r\n\r\nexport const Section: React.FC<{ title: string, unlocked?: boolean }> = ({title, children, unlocked = true}) => {\r\n    return <div style={{ borderBottom: border, marginBottom, marginTop, paddingBottom }}>\r\n        <SectionHeader title={title} />\r\n        {unlocked ? children : \"Locked\"}\r\n    </div>;\r\n}\r\n\r\nexport function SectionHeader(props: { title?: string, size?: number }) {\r\n    return props.title && <div style={{ fontSize: props.size ? `${props.size * 100}%` : titleFontSize, marginBottom }}>\r\n        {props.title}\r\n    </div> || null;\r\n}\r\n\r\nexport const Block: React.FC<{ }> = ({children}) => {\r\n    return <div style={{padding, margin, border}}>\r\n        {children}\r\n    </div>;\r\n}","import React from 'react';\r\nimport { Money, Research, Year } from '../Resources';\r\nimport { Task, TaskQueue } from '../stuff/tasks';\r\nimport { StatRow } from './planet';\r\nimport { Block, border, backgroundColor, SectionHeader } from './section';\r\n\r\ninterface SimpleActionProps {\r\n    name: string,\r\n    description?: string,\r\n    money?: number,\r\n    research?: number,\r\n    time?: number,\r\n    onBuy?: () => void,\r\n    blocked?: string,\r\n    buyText?: string\r\n}\r\n\r\nexport const SimpleAction: React.FC<SimpleActionProps> = props => {\r\n    const hasEnoughMoney = !props.money || Money.current >= props.money;\r\n    const hasEnoughResearch = !props.research || Research.current >= props.research;\r\n    const canAfford = hasEnoughMoney && hasEnoughResearch;\r\n\r\n    return <Block>\r\n        <SectionHeader title={props.name} size={1.1} />\r\n        <SectionHeader title={props.description} size={.9} />\r\n        <StatRow name=\"Cost\" stat={props.money} unit={Money.icon} color={hasEnoughMoney ? undefined : \"red\"} />\r\n        <StatRow name=\"Research cost\" stat={props.research} unit={Research.icon} color={hasEnoughResearch ? undefined : \"red\"} />\r\n        <StatRow name=\"Build time\" stat={props.time} unit={\" year(s)\" + Year.icon} />\r\n        {props.children}\r\n        {props.blocked ? props.blocked : <button\r\n            style={{ cursor: \"pointer\" }}\r\n            disabled={!canAfford || !!props.blocked}\r\n            onClick={() => {\r\n                if (Money.current >= (props.money || 0) && Research.current >= (props.research || 0)) {\r\n                    Money.Subtract(props.money || 0);\r\n                    Research.Subtract(props.research || 0);\r\n                    props.onBuy?.();\r\n                }\r\n            }}\r\n        >{props.buyText || \"Buy\"}</button>}\r\n    </Block>\r\n}\r\n\r\nexport const TaskProgressBar: React.FC<{ task: Task }> = props => {\r\n    const progress = props.task.percent;\r\n    return <div style={{ border, backgroundColor, margin: 5 }}>\r\n        <div style={{ backgroundColor: \"green\", height: 20, width: props.task.percentWidth }}></div>\r\n    </div>\r\n}\r\n\r\ninterface QueuedBlockingActionProps extends Omit<SimpleActionProps, 'onBuy'> {\r\n    onComplete: () => void,\r\n    time: number,\r\n    queue: TaskQueue,\r\n    limitPerId?: number,\r\n    limitPerQueue?: number,\r\n}\r\n\r\nexport function QueuedBlockingAction(props: QueuedBlockingActionProps) {\r\n\r\n    // blocking can be some max # in the entire QUEUE\r\n    // or blocking can be some max # per unique ID/action in the QUEUE.\r\n    // for now lets do per QUEUE and per action\r\n    let blocked: string | undefined = undefined;\r\n    if (props.queue.limitPerQueue) {\r\n        if (props.queue.length >= props.queue.limitPerQueue) {\r\n            blocked = \"Queue is full.\";\r\n        }\r\n    }\r\n    if (props.queue.limitPerId) {\r\n        if (props.queue.count(props.name) >= props.queue.limitPerId) {\r\n            blocked = \"In progress...\";\r\n        }\r\n    }\r\n\r\n    return <SimpleAction\r\n        {...props}\r\n        blocked={blocked}\r\n        onBuy={() => {\r\n            return props.queue.push(\r\n                new Task(props.name, Year.current, Year.current + props.time, props.onComplete)\r\n            );\r\n        }}\r\n    >\r\n        {props.queue.get(props.name).map((t, i) => <TaskProgressBar task={t} key={i} />)}\r\n    </SimpleAction>\r\n}","import React from 'react';\r\nimport { Planet, SpaceObject } from '../stuff/universe';\r\n\r\nexport function BallView({ obj, size = 100, blur = 0 }: { obj: SpaceObject, blur?: number, size?: number }) {\r\n    return (\r\n        <div style={{ position: \"relative\" }}>\r\n            <div style={{\r\n                margin: 10,\r\n                backgroundColor: obj.img ? undefined : obj.color,\r\n                borderRadius: \"100%\",\r\n                height: size,\r\n                width: size,\r\n                filter: blur ? `blur(${blur}px)` : undefined,\r\n            }}>\r\n                {obj.img ? <img src={obj.img} height={size} width={size} /> : null}\r\n            </div>\r\n            {blur ? <div style={{  position: \"absolute\", top: 'calc(50% - 20px)', left: 'calc(50% - 15px)', fontSize: 30 }}>❔</div> : null}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Research, R_ICON } from '../Resources';\r\nimport { MONTH } from '../setter';\r\nimport { TelescopeQueue } from '../stages/EarthStage';\r\nimport { PlanetResearch } from '../stages/SolarSystem';\r\nimport { Planet, ROUND, SpaceObject } from '../stuff/universe';\r\nimport { QueuedBlockingAction } from './action';\r\nimport { BallView } from './ball';\r\nimport { Block, SectionHeader } from './section';\r\n\r\nfunction randomNumber() {\r\n    return Math.round(Math.random() * 1000);\r\n}\r\n\r\nfunction randomLetter() {\r\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    return chars.charAt(Math.floor(Math.random() * 26));\r\n}\r\n\r\nfunction createName() {\r\n    return `Planet ${randomLetter()}${randomLetter()}_${randomNumber()}_${randomLetter}`;\r\n}\r\n\r\nexport function StatRow(props: { color?: string, name: string, stat?: number | string, unit?: string, round?: number }) {\r\n    let displayValue = props.stat;\r\n    if (props.stat && !isNaN(props.stat as any)) {\r\n        displayValue = ROUND(Number(props.stat), props.round || 100);\r\n    }\r\n    return props.stat && <div style={{ color: props.color }}>\r\n        {props.name}: {displayValue}{props.unit}\r\n    </div> || null;\r\n}\r\n\r\nexport function SpaceObjectView({ planet }: { planet: SpaceObject | Planet }) {\r\n    const [name] = React.useState(planet.name || createName());\r\n\r\n    return (\r\n        <div style={{ padding: 10 }}>\r\n            <div style={{ fontSize: \"calc(10px + 1vmin)\" }}>{name}</div>\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n\r\n                <BallView obj={planet} />\r\n\r\n                <div>\r\n                    <StatRow name=\"Mass\" unit=\"kg\" stat={planet.mass} />\r\n                    <StatRow name=\"Diameter\" unit=\"km\" stat={planet.diameter} />\r\n                    <StatRow name=\"Distance from star\" unit=\"km\" stat={(planet as Planet).distance} />\r\n                    <StatRow name=\"Type\" stat={(planet as any).type} />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function PlanetBallView({ planet }: { planet: Planet }) {\r\n    let blur = 0;\r\n    let obj = { ...planet };\r\n    if (!planet.research || planet.research.picture == \"none\") {\r\n        delete obj.img;\r\n        blur = 5;\r\n    }\r\n    return <BallView obj={obj} blur={blur} />\r\n}\r\n\r\nexport function ResearchStat({ name, unit, stat, studied = true }: { stat?: string | number, studied?: boolean, name: string, unit?: string }) {\r\n    return <StatRow name={name} unit={unit} stat={studied ? stat : \"?\"} />;\r\n\r\n}\r\n\r\nexport function PlanetView({ planet }: { planet: Planet }) {\r\n    let [name] = React.useState(planet.name || createName());\r\n\r\n    if (!planet.research || !planet.research.discovered) {\r\n        name = \"Undiscovered object\";\r\n    }\r\n\r\n    return (\r\n        <Block>\r\n            <SectionHeader title={name} size={1.1} />\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n\r\n                <PlanetBallView planet={planet} />\r\n\r\n                <div>\r\n                    <ResearchStat name=\"Mass\" unit=\"kg\" stat={planet.mass} studied={!!planet.research?.studied && planet.research?.studied != 'none'} />\r\n                    <ResearchStat name=\"Diameter\" unit=\"km\" stat={planet.diameter} studied={!!planet.research?.studied} />\r\n                    <ResearchStat name=\"Type\" stat={planet.type} studied={!!planet.research?.studied} />\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {planet.research?.discovered || planet.research?.studied === \"none\" ?\r\n                \"discovered\"\r\n                :\r\n                <QueuedBlockingAction\r\n                    name={`Study ${planet.name || name}`}\r\n                    description={`Use your telescope to study the unkown object and learn more about it. Earns 1 ${R_ICON}`}\r\n                    queue={TelescopeQueue}\r\n                    time={3 * MONTH}\r\n                    buyText=\"Study\"\r\n                    onComplete={() => {\r\n                        planet.research = planet.research || {} as any;\r\n                        planet.research!.discovered = true;\r\n                        planet.research!.studied = \"telescope\";\r\n                        Research.Add(1);\r\n                    }}\r\n                />\r\n            }\r\n        </Block>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Planet, Star } from '../stuff/universe';\r\nimport { BallView } from './ball';\r\n\r\nexport function System(props: { star: Star }) {\r\n    let maxDistance = 0;\r\n    let maxDiameter = 0;\r\n    for (const planet of props.star.planets) {\r\n        maxDistance = Math.max(maxDistance, planet.distance);\r\n        maxDiameter = Math.max(maxDiameter, planet.diameter || 1);\r\n    }\r\n    console.log(\"max diamater\", maxDiameter);\r\n    return <div style={{ borderBottom: \"2px solid grey\", padding: 10, display: \"flex\", flexDirection: \"row\" }}>\r\n        <BallView obj={props.star as any} size={80} />\r\n        <div style={{ position: \"relative\", flex:\"auto\", marginRight: 10 }}>\r\n            {props.star.planets.map((p,i) => <PositionBallView\r\n                index={i+1}\r\n                maxIndex={props.star.planets.length}\r\n                size={50}\r\n                planet={p}\r\n                maxDistance={maxDistance}\r\n                maxDiameter={maxDiameter}\r\n            />)}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport function PositionBallView({ planet, index, maxIndex, maxDistance, maxDiameter, size = 50 }: { planet: Planet, index:number, maxIndex: number, maxDistance: number, maxDiameter?: number, size?: number }) {\r\n    const diameter = (maxDiameter ? size * (planet.diameter || 1) / maxDiameter : size) + 10;\r\n    const scale = 1;\r\n    const distance = 100 * Math.pow(planet.distance, scale) / Math.pow(maxDistance, scale);\r\n    const proportion = 100* index / maxIndex;\r\n    const testDist = (distance + proportion) / 2;\r\n    return (\r\n        <div style={{\r\n            position: \"absolute\",\r\n            top: `calc(50% - ${.5 * diameter}px)`,\r\n            left: `calc(${testDist}% - ${diameter}px)`,\r\n            backgroundColor: planet.color,\r\n            borderRadius: \"50%\",\r\n            height: diameter,\r\n            width: diameter\r\n        }}></div>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/mercuryimg.d800f48b.png\";","import React from \"react\";\r\nimport { PlanetView, SpaceObjectView, StatRow } from \"../components/planet\";\r\nimport { System } from \"../components/system\";\r\nimport { Money, Year } from \"../Resources\";\r\nimport { BILLION, MILLION, Planet, Probe, ROUND, SpaceObject, Star } from \"../stuff/universe\";\r\nimport { ResearchOption } from \"./EarthStage\";\r\nimport mercuryimg from \"../images/mercuryimg.png\";\r\nimport earthimg from \"../images/earthimg.png\";\r\nimport moonimg from \"../images/moonimg.png\";\r\n\r\nexport const Mercury: Planet = {\r\n    name: \"Mercury\",\r\n    img: mercuryimg,\r\n    color: \"grey\",\r\n    age: 4 * BILLION,\r\n    distance: 61.157 * MILLION,\r\n    type: \"rocky\",\r\n    diameter: 4879,\r\n    mass: 3.285e23,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Venus: Planet = {\r\n    name: \"Venus\",\r\n    color: \"bisque\",\r\n    age: 4 * BILLION,\r\n    distance: 108.44 * MILLION,\r\n    type: \"venuslike\",\r\n    diameter: 12104,\r\n    mass: 4.867e24,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Moon: Planet = {\r\n    name: \"Moon\",\r\n    img: moonimg,\r\n    color: \"grey\",\r\n    age: 4 * BILLION,\r\n    distance: 384400,\r\n    type: \"rocky\",\r\n    diameter: 3474,\r\n    mass: 7.348e22,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Earth: Planet = {\r\n    name: \"Earth\",\r\n    img: earthimg,\r\n    color: \"#18F\",\r\n    age: 4 * BILLION,\r\n    distance: 149.6 * MILLION,\r\n    type: \"rocky\",\r\n    diameter: 12742,\r\n    mass: 5.972e24,\r\n    percentUtilization: .5,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: [],\r\n    moons: [Moon],\r\n    research: {\r\n        discovered: true,\r\n        studied: \"human\",\r\n        picture: \"none\",\r\n        temperature: \"human\",\r\n        soil: \"human\",\r\n        water: \"human\",\r\n        atmosphere: \"human\",\r\n    }\r\n};\r\n\r\nexport const Mars: Planet = {\r\n    name: \"Mars\",\r\n    color: \"red\",\r\n    age: 4 * BILLION,\r\n    distance: 228.16 * MILLION,\r\n    type: \"rocky\",\r\n    diameter: 6779,\r\n    mass: 6.39e23,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\n\r\nexport const Jupiter: Planet = {\r\n    name: \"Jupiter\",\r\n    color: \"orange\",\r\n    age: 4 * BILLION,\r\n    distance: 762.51 * MILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 139820,\r\n    mass: 1.898e27,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Saturn: Planet = {\r\n    name: \"Saturn\",\r\n    color: \"tan\",\r\n    age: 4 * BILLION,\r\n    distance: 926.57 * MILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 116360,\r\n    mass: 5.683e26,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Uranus: Planet = {\r\n    name: \"Uranus\",\r\n    color: \"lightblue\",\r\n    age: 4 * BILLION,\r\n    distance: 2.9575 * BILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 50724,\r\n    mass: 8.681e25,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Neptune: Planet = {\r\n    name: \"Neptune\",\r\n    color: \"blue\",\r\n    age: 4 * BILLION,\r\n    distance: 4.4759 * BILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 49244,\r\n    mass: 1.024e26,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Sun = {\r\n    name: \"Sun\",\r\n    color: \"yellow\",\r\n    age: 4.5 * BILLION,\r\n    distance: 0,\r\n    type: \"sunlike\",\r\n    death: 7.5 * BILLION,\r\n    mass: 1.989e30, // KG\r\n    diameter: 1391000, // KM\r\n    incomingProbes: [],\r\n    planets: [\r\n        Mercury,\r\n        Venus,\r\n        Earth,\r\n        Mars,\r\n        Jupiter,\r\n        Saturn,\r\n        Uranus,\r\n        Neptune,\r\n    ],\r\n} as Star;\r\n\r\nexport function SolarSystem(props: { star: Star }) {\r\n    const launchCost = .1;\r\n    return <div>\r\n        <div style={{ position: \"relative\" }}>\r\n            <System star={props.star} />\r\n        </div>\r\n        <PlanetView planet={props.star as any} />\r\n\r\n        {props.star.planets.map(p =>\r\n            <PlanetView planet={p} />\r\n\r\n        )}\r\n\r\n    </div>\r\n}\r\n/*\r\n{p.incomingProbes.map(probe => <ProbeView probe={probe} />)}\r\n{p !== Earth ?\r\n    <button\r\n        style={{ cursor: \"pointer\" }}\r\n        disabled={Earth.availableProbes.length === 0 || Money.current < launchCost}\r\n        onClick={() => {\r\n            const probe = Earth.availableProbes.pop()!;\r\n            probe.launchYear = Year.current;\r\n            probe.arrivalYear = Year.current + Math.abs(p.distance - Earth.distance) / 8.76e7;\r\n            p.incomingProbes.push(probe);\r\n            Money.Subtract(launchCost);\r\n        }}\r\n    >Launch probe\r\n    ({launchCost} billion {Money.icon})\r\n    ({ROUND(Math.abs(p.distance - Earth.distance) / 8.76e7)} years)\r\n    </button>\r\n    : null}\r\n    */\r\n\r\nexport function ProbeView({ probe }: { probe: Probe }) {\r\n    return <div>\r\n        <div>🛰️</div>\r\n        <StatRow name=\"Launched\" stat={probe.launchYear} round={1} />\r\n        <StatRow name={probe.arrivalYear! < Year.current ? \"Arrived\" : \"Arriving\"} stat={probe.arrivalYear} round={1} />\r\n        <ProbeProgressBar probe={probe} />\r\n    </div>\r\n}\r\n\r\nexport function ProbeProgressBar({ probe }: { probe: Probe }) {\r\n    if (Year.current > probe.arrivalYear! + 5) { return null; }\r\n    let color = \"red\";\r\n    if (Year.current > probe.arrivalYear!) { color = \"green\"; }\r\n    const progress = (probe.arrivalYear! - Year.current) / (probe.arrivalYear! - probe.launchYear!);\r\n    return <div style={{ display: \"flex\", marginRight: 10, backgroundColor: \"grey\" }}>\r\n        <div style={{ width: (100 - (progress * 100)) + \"%\", height: 10, backgroundColor: color }}></div>\r\n    </div>\r\n}\r\n\r\n// this defines what we have actually DISCOVERED and sent there.\r\nexport type level = \"none\" | \"telescope\" | \"probe\" | \"lander\" | \"returned sample\" | \"human\";\r\nexport interface PlanetResearch {\r\n    /** This starts false */\r\n    discovered: boolean,\r\n\r\n    /** after study, you can now send probes there, etc */\r\n    studied: level,\r\n\r\n    picture: level,\r\n    temperature: level,\r\n    atmosphere: level,\r\n    soil: level,\r\n    water: level,\r\n}","export default __webpack_public_path__ + \"static/media/earthimg.eeca67e5.png\";","export default __webpack_public_path__ + \"static/media/moonimg.d38055fa.png\";","import React from 'react';\r\nimport { Earth } from './SolarSystem';\r\nimport { Budget, Money, Research, Year } from '../Resources';\r\nimport { PlanetView, StatRow } from '../components/planet';\r\nimport { Task, TaskQueue } from '../stuff/tasks';\r\nimport { Section } from '../components/section';\r\nimport { QueuedBlockingAction } from '../components/action';\r\n\r\n// manufacturing can only do 1 thing at a time globally\r\nexport const ManufacturingQueue = new TaskQueue(1,1);\r\n\r\n// research queue can do one of each at a time\r\nexport const ResearchQueue = new TaskQueue(1);\r\n\r\n// probe queue can do all of the things\r\nexport const ProbeQueue = new TaskQueue();\r\n\r\n// telescope can only do 1 thing at a time!\r\nexport const TelescopeQueue = new TaskQueue(1,1);\r\n\r\nexport function EarthStage(props: {}) {\r\n    return <Section title=\"Earth\">\r\n        <PlanetView planet={Earth} />\r\n\r\n        <div style={{ borderBottom: \"2px solid grey\" }}></div>\r\n        <Probes />\r\n        <EarthManufacturing />\r\n        <ResearchStore />\r\n    </Section>\r\n}\r\n\r\n// so we should have like a STORE\r\n\r\nexport function Probes(props: {}) {\r\n    return <Section title=\"Inventory\">\r\n        Probes available: {Earth.availableProbes.length} 🛰️\r\n    </Section>\r\n}\r\n\r\nexport function EarthManufacturing(props: {}) {\r\n    // manufacturing has say... some fixed number of slots that can be used\r\n    return <Section title=\"Manufacture\">\r\n        <QueuedBlockingAction\r\n            name=\"Space probe\"\r\n            description=\"Build a probe that you can launch to other planets to perform research.\"\r\n            money={1}\r\n            time={1}\r\n            queue={ManufacturingQueue}\r\n            onComplete={() => {\r\n                Earth.availableProbes.push({ manufactureDate: Year.current });\r\n            }}\r\n        />\r\n    </Section>\r\n}\r\n\r\n\r\n// so we should have like a STORE\r\n\r\nexport function ResearchStore(props: {}) {\r\n    return <Section title=\"Research\">\r\n        <QueuedBlockingAction\r\n            name=\"Raise funds\"\r\n            description={`Raise ${1} billion 💲`}\r\n            research={1}\r\n            time={.5}\r\n            queue={ResearchQueue}\r\n            onComplete={() => { Money.Add(1) }}\r\n            buyText=\"Start\"\r\n        />\r\n        <QueuedBlockingAction\r\n            name=\"Increase budget\"\r\n            description={`Increases the monthly budget by ${.1} billion 💲`}\r\n            money={1}\r\n            research={1}\r\n            time={.5}\r\n            queue={ResearchQueue}\r\n            onComplete={() => { Budget.Add(.1); }}\r\n        />\r\n    </Section>\r\n}\r\n\r\nexport function ResearchOption(props: { name: string, money?: number, research?: number, onBuy?: () => void }) {\r\n    const hasEnoughMoney = !props.money || Money.current >= props.money;\r\n    const hasEnoughResearch = !props.research || Research.current >= props.research;\r\n    const canAfford = hasEnoughMoney && hasEnoughResearch;\r\n\r\n    return <div style={{ margin: 10, padding: 10, border: \"2px solid grey\" }}>\r\n        <div>{props.name}</div>\r\n        <StatRow name=\"Money\" stat={props.money} unit={Money.icon} color={hasEnoughMoney ? undefined : \"red\"} />\r\n        <StatRow name=\"Research\" stat={props.research} unit={Research.icon} color={hasEnoughResearch ? undefined : \"red\"} />\r\n        <button\r\n            style={{ cursor: \"pointer\" }}\r\n            disabled={!canAfford}\r\n            onClick={() => {\r\n                if (Money.current >= (props.money || 0) && Research.current >= (props.research || 0)) {\r\n                    Money.Subtract(props.money || 0);\r\n                    Research.Subtract(props.research || 0);\r\n                    props.onBuy?.();\r\n                }\r\n            }}\r\n        >\r\n            Buy\r\n        </button>\r\n    </div>\r\n}","import React from 'react';\r\n\r\nexport interface Tab {\r\n    content: React.ReactNode,\r\n    title: string,\r\n    locked?: boolean,\r\n}\r\n\r\nconst backgroundColor = \"grey\";\r\nconst border = `2px solid ${backgroundColor}`;\r\n\r\nexport function Tabs(props: {\r\n    tabs: Tab[],\r\n    startTab?: number,\r\n}) {\r\n    const [selected, setSelected] = React.useState(props.startTab || 0);\r\n\r\n    const tablist = <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n        {props.tabs.map((tab, i) => <div\r\n            key={i}\r\n            onClick={() => !tab.locked && setSelected(i)}\r\n            style={{\r\n                border,\r\n                backgroundColor: i === selected ? backgroundColor : undefined,\r\n                marginRight: 10,\r\n                padding: 5,\r\n                marginBottom: -2,\r\n                cursor: \"pointer\",\r\n            }}\r\n        >\r\n            {tab.locked ? '🔒 ' : null}{tab.title}\r\n        </div>)}\r\n    </div>;\r\n\r\n    return <div>\r\n        {tablist}\r\n        <div style={{ borderTop: border }}>\r\n            {props.tabs[selected].content}\r\n        </div>\r\n    </div>;\r\n}","import { Task } from \"../stuff/tasks\";\r\nimport { ProbeContainer } from \"./probe\";\r\n\r\nexport class GalaxyContainer {\r\n    constructor(public readonly totalStars: number, public readonly startYear: number, private techtree: ProbeContainer) { }\r\n\r\n    public currentYear = this.startYear;\r\n    public probeProducingStars = 1;\r\n    public runningProbes: Task[] = [];\r\n    public launchedProbes = 0;\r\n    public activeProbes = 0;\r\n\r\n    get unexploredPlanets() { return this.totalStars - this.probeProducingStars; }\r\n\r\n    run100Years() {\r\n        this.currentYear += 100;\r\n        this.runningProbes = this.runningProbes.filter(task => !task.complete(this.currentYear));\r\n\r\n        // can't have more systems than stars!\r\n        this.probeProducingStars = Math.min(this.totalStars, this.probeProducingStars);\r\n\r\n        // say it takes 10 years to create a entire probe thing\r\n        const newProbes = this.probeProducingStars * this.techtree.probesPer100Years.get();\r\n        this.activeProbes += newProbes;\r\n        this.launchedProbes += newProbes;\r\n        this.runningProbes.push(\r\n            new Task(\r\n                \"send ai probes\",\r\n                this.currentYear,\r\n                this.currentYear + this.techtree.interstarYears.get() + this.techtree.yearsToCreateAProbeFromDiscovery.get(),\r\n                () => {\r\n                    this.activeProbes -= newProbes;\r\n                    let successfulProbes = Math.floor(this.techtree.successRate.get() * newProbes);\r\n                    if(newProbes < 10000){\r\n                        successfulProbes = 0;\r\n                        // run each one!\r\n                        for(let i = 0; i <newProbes;i++){\r\n                            if(Math.random() < this.techtree.successRate.get()){\r\n                                successfulProbes++;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.probeProducingStars += successfulProbes;\r\n                }));\r\n    }\r\n}","\r\nexport class Trait<T> {\r\n    constructor(private researchLevels: T[]) { }\r\n    private level = 0;\r\n\r\n    get(): T {\r\n        return this.researchLevels[this.level];\r\n    }\r\n\r\n    get isMaxed() {\r\n        return this.level >= this.researchLevels.length - 1;\r\n    }\r\n\r\n    increase() {\r\n        if (!this.isMaxed) { this.level++; }\r\n    }\r\n}\r\nexport class ProbeContainer {\r\n    public yearsToCreateAProbeFromDiscovery = new Trait([1000, 500, 250, 100]);\r\n    public probesPer100Years = new Trait([1, 2, 5, 10, 25, 50, 100, 1000]);\r\n    public interstarYears = new Trait([10000, 5000, 1000, 150]);\r\n    public successRate = new Trait([.05, .1, 33, .5, .7]);\r\n    public researchSent = new Trait([1.1, 1.25, 1.5, 2, 5, 10]);\r\n    public research = 0;\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { EarthStage, ManufacturingQueue, ProbeQueue, ResearchQueue, TelescopeQueue } from './stages/EarthStage';\nimport { Tabs } from './components/tabs';\nimport { GalaxyContainer } from './simplified/galaxy';\nimport { ProbeContainer } from './simplified/probe';\nimport { SolarSystem, Sun } from './stages/SolarSystem';\nimport { ROUND } from './stuff/universe';\nimport { Budget, Money, Research, Year } from './Resources';\n\nconst TechTree = new ProbeContainer();\nconst MilkyWay = new GalaxyContainer(100000000000, 2000, TechTree);\n\nfunction App() {\n  const [year, setYear] = React.useState(Year.current);\n  Year.Register(setYear);\n\n  const [research, setResearch] = React.useState(Research.current);\n  Research.Register(setResearch);\n\n  const [money, setMoney] = React.useState(Money.current);\n  Money.Register(setMoney);\n\n  const [budget, setBudget] = React.useState(Budget.current);\n  Budget.Register(setBudget);\n\n  // register ALLL  the queues...😭\n\n  const [queueChanger, setQueues] = React.useState({});\n  const triggerQueues = () => { setQueues({}); };\n\n  ResearchQueue.Register(triggerQueues);\n  ManufacturingQueue.Register(triggerQueues);\n  ProbeQueue.Register(triggerQueues);\n  TelescopeQueue.Register(triggerQueues);\n\n  const run100Years = () => {\n    MilkyWay.run100Years();\n    setYear(MilkyWay.currentYear);\n  };\n\n  const run1000Years = () => {\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    setYear(MilkyWay.currentYear);\n  };\n\n  const run10000Years = () => {\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    setYear(MilkyWay.currentYear);\n  };\n\n  const galaxyStuff = <><div>Year {MilkyWay.currentYear}</div>\n    <div>Milky Way</div>\n    <div>Total Stars: {MilkyWay.totalStars}</div>\n    <div>Untouched Stars: {MilkyWay.unexploredPlanets}</div>\n    <div>Probe producing Stars: {MilkyWay.probeProducingStars}</div>\n    <div>% of MilkyWay producing: {Math.floor(MilkyWay.probeProducingStars * 100000 / MilkyWay.totalStars) / 1000}%</div>\n    <div>Probes launched: {MilkyWay.launchedProbes}</div>\n    <div>Active probes: {MilkyWay.activeProbes}</div>\n    <div></div>\n    <div></div>\n    <div>\n      <button onClick={run100Years}>Run 100 years</button>\n      <button onClick={run1000Years}>Run 1000 years</button>\n      <button onClick={run10000Years}>Run 10000 years</button>\n    </div></>;\n\n  return (\n    <div style={{ backgroundColor: \"#333\", minHeight: \"100vh\", color: \"white\", padding: 10, fontFamily: 'Courier New, monospace' }}>\n      <div style={{ fontSize: \"calc(10px + 2vmin)\", marginBottom: 10 }}>Universal</div>\n      <div style={{ marginBottom: 5 }}>Year: {Year.date}</div>\n      <div style={{ marginBottom: 5 }}>Research: {research}🧪</div>\n      <div style={{ marginBottom: 5 }}>Money: {ROUND(money)} billion 💲</div>\n      <div style={{ marginBottom: 5 }}>Budget: {ROUND(budget)} billion 📈</div>\n      <Tabs\n        tabs={[\n          { title: \"Earth\", content: <EarthStage /> },\n          { title: \"Solar System\", content: <SolarSystem star={Sun} /> },\n          { title: \"Milky Way\", content: galaxyStuff, locked: true },\n        ]}\n      />\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}