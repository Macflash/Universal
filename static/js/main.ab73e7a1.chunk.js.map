{"version":3,"sources":["components/tabs.tsx","stuff/universe.ts","setter.tsx","components/section.tsx","components/action.tsx","components/ball.tsx","components/planet.tsx","components/system.tsx","images/mercuryimg.png","stages/SolarSystem.tsx","images/earthimg.png","images/moonimg.png","Resources.ts","stuff/tasks.ts","simplified/galaxy.ts","simplified/probe.ts","stuff/tech.ts","stages/EarthStage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["backgroundColor","border","Tabs","props","React","useState","startTab","selected","setSelected","tablist","style","display","flexDirection","tabs","filter","tab","requires","canBuy","unlocked","map","i","onClick","undefined","marginRight","padding","marginBottom","cursor","title","borderTop","content","BILLION","ROUND","n","scale","Math","round","Setter","value","icon_","onChange","newValue","this","icon","v","MONTH","DateSetter","year","whole","floor","fraction","month","Months","EnsureDigits","AsDate","current","Add","Section","children","borderBottom","marginTop","paddingBottom","SectionHeader","fontSize","size","Block","margin","SimpleAction","hasEnoughMoney","money","Money","hasEnoughResearch","research","Research","canAfford","name","description","StatRow","stat","unit","color","time","Year","blocked","disabled","Subtract","onBuy","buyText","TaskProgressBar","task","percent","height","width","percentWidth","QueuedBlockingAction","queue","limitPerQueue","length","limitPerId","count","push","Task","onComplete","get","t","BallView","obj","blur","position","img","borderRadius","src","top","left","displayValue","isNaN","Number","PlanetBallView","planet","picture","ResearchStat","studied","PlanetView","discovered","mass","diameter","type","R_ICON","TelescopeQueue","System","maxDistance","maxDiameter","star","planets","max","distance","console","log","flex","p","PositionBallView","index","maxIndex","testDist","pow","Earth","age","percentUtilization","fullyUtilized","availableProbes","incomingProbes","moons","temperature","soil","water","atmosphere","Sun","death","mercuryimg","SolarSystem","Budget","setInterval","AddMonth","incomingProbe","arrivalYear","UpdateProbes","ManufacturingQueue","update","ResearchQueue","ProbeQueue","id","startYear","endYear","callback","isComplete","callbacks","addOnComplete","currentYear","forEach","c","getProgress","TaskQueue","onchange","splice","hasChanged","completedTask","shift","complete","GalaxyContainer","totalStars","techtree","probeProducingStars","runningProbes","launchedProbes","activeProbes","min","newProbes","probesPer100Years","interstarYears","yearsToCreateAProbeFromDiscovery","successfulProbes","successRate","random","Trait","researchLevels","level","isMaxed","Tech","researchCost","dependsOn","researchTime","All","find","tech","Unlocked","dep","IsUnlocked","GroundTelescope","Rocketry","Probes","InterstellarTravel","availableTelescopes","EarthManufacturing","manufactureDate","condition","quality","ResearchStore","unlock","MilkyWay","researchSent","App","setYear","Register","setResearch","setMoney","budget","setBudget","setQueues","triggerQueues","run1000Years","run100Years","galaxyStuff","unexploredPlanets","minHeight","fontFamily","date","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab73e7a1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Tech } from '../stuff/tech';\r\n\r\nexport interface Tab {\r\n    content: React.ReactNode,\r\n    title: string,\r\n    requires?: Tech,\r\n}\r\n\r\nconst backgroundColor = \"grey\";\r\nconst border = `2px solid ${backgroundColor}`;\r\n\r\nexport function Tabs(props: {\r\n    tabs: Tab[],\r\n    startTab?: number,\r\n}) {\r\n    const [selected, setSelected] = React.useState(props.startTab || 0);\r\n\r\n    const tablist = <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n        {props.tabs.filter(tab => !tab.requires || tab.requires.canBuy || tab.requires.unlocked).map((tab, i) => <div\r\n            key={i}\r\n            onClick={() => (tab.requires == null || tab.requires?.unlocked) && setSelected(i)}\r\n            style={{\r\n                border,\r\n                backgroundColor: i === selected ? backgroundColor : undefined,\r\n                marginRight: 10,\r\n                padding: 5,\r\n                marginBottom: -2,\r\n                cursor: \"pointer\",\r\n            }}\r\n        >\r\n            {(tab.requires && !tab.requires.unlocked) ? '🔒 ' : null}{tab.title}\r\n        </div>)}\r\n    </div>;\r\n\r\n    return <div>\r\n        {tablist}\r\n        <div style={{ borderTop: border }}>\r\n            {props.tabs[selected].content}\r\n        </div>\r\n    </div>;\r\n}","import { PlanetResearch } from \"../stages/SolarSystem\";\r\n\r\nexport const MILLION = 1000 * 1000;\r\nexport const BILLION = 1000 * MILLION;\r\n\r\nexport function ROUND(n: number, scale = 10){\r\n    return Math.round(n * scale) / scale;\r\n}\r\n\r\nexport interface Probe {\r\n    //speed: number;\r\n    //startingDistance: number;\r\n    //remainingDistance: number;\r\n\r\n    manufactureDate: number,\r\n    launchYear?: number,\r\n    arrivalYear?: number,\r\n\r\n    // TODO: what stuff is like.. on it? etc.. OH well skip it for now...\r\n    // add like camera quality and STUFF.    \r\n}\r\n\r\nexport interface Telescope {\r\n    manufactureDate: number,\r\n    launchYear?: number,\r\n    quality?: \"blurry\" | \"ok\" | \"good\" | \"excellent\",\r\n    type: \"ground\" | \"space\",\r\n    condition: number,\r\n}\r\n\r\nexport interface SpaceObject {\r\n    name?: string;\r\n    mass?: number;\r\n    diameter?: number;\r\n    color?: string;\r\n    img?: string;\r\n}\r\n\r\nexport interface Planet extends SpaceObject {\r\n    // TODO: add stuff here\r\n    // mostly need energy SOOO what affects that?\r\n    \r\n    /** Distance from the star(s) in the system. This is the main driver of solar energy. */\r\n    distance: number;\r\n\r\n    /** Affects how you can extract resources and energy. */\r\n    type: \"rocky\" | \"venuslike\" | \"earthlike\" | \"superearth\" | \"gasgiant\";\r\n\r\n    age?: number;\r\n\r\n    /** how utilized the planet is. */\r\n    percentUtilization: number;\r\n\r\n    fullyUtilized: boolean;\r\n\r\n    incomingProbes: Probe[];\r\n    availableProbes: Probe[];\r\n\r\n    availableTelescopes?: Telescope[];\r\n\r\n    moons?: Planet[];\r\n\r\n    research?: PlanetResearch;\r\n}\r\n\r\nexport interface Star extends SpaceObject  {\r\n    /** Distance from initial system in light years */\r\n    distance: number;\r\n\r\n    /** Mass is the main driver for the output of the star. */\r\n    mass: number;\r\n\r\n    /** This is redundant based on mass and age but of well */\r\n    type: \"brown dwarf\" | \"smallred\" | \"sunlike\" | \"massivestar\" | \"supermassivestar\" | \"redgiant\" | \"binary\" | \"tertiary\";\r\n\r\n    /** how old the star is. */\r\n    age: number;\r\n\r\n    /** Expected time of death */\r\n    death: number;\r\n\r\n    /** Everything that orbits the star */\r\n    planets: Planet[];\r\n\r\n    incomingProbes: Probe[];\r\n}\r\n\r\nexport interface Galaxy {\r\n    /** distance from the initial galaxy in light years */\r\n    distance: number;\r\n\r\n    totalStars: number;\r\n\r\n    discoveredStars: Star[];\r\n    exploredStars: Star[];\r\n\r\n    incomingProbes: Probe[];\r\n}\r\n\r\nexport interface Universe {\r\n    totalGalaxies: number;\r\n    \r\n    discoveredGalaxies: Galaxy[];\r\n    exploredGalaxies: Galaxy[];\r\n}","import { ROUND } from \"./stuff/universe\";\r\n\r\nexport class Setter {\r\n    constructor(private value: number, private icon_ = '') { }\r\n\r\n    onChange = (newValue: number) => { }\r\n\r\n    Register(onChange: (newValue: number) => void) {\r\n        this.onChange = onChange;\r\n    }\r\n\r\n    get current() {\r\n        return this.value;\r\n    }\r\n\r\n    get icon(){\r\n        return this.icon_;\r\n    }\r\n\r\n    Display():string {\r\n        return ROUND(this.value) + this.icon;\r\n    }\r\n\r\n    Set(v: number) {\r\n        this.value = v;\r\n        this.onChange(this.value);\r\n    }\r\n\r\n    Add(v: number) {\r\n        this.value += v;\r\n        this.onChange(this.value);\r\n    }\r\n\r\n    Subtract(v: number) { \r\n        this.value -= v;\r\n        this.onChange(this.value);\r\n    }\r\n}\r\n\r\nexport const MONTH = 1/12;\r\nexport class DateSetter extends Setter {\r\n    static Months = [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec',\r\n    ];\r\n\r\n    AsDate(){\r\n       return AsDate(this.current, this.icon);\r\n    }\r\n\r\n    get date(){\r\n        return this.AsDate();\r\n    }\r\n\r\n    AddMonth(){\r\n        this.Add(MONTH);\r\n    }\r\n    AddYear(){\r\n        this.Add(1);\r\n    }\r\n\r\n    constructor(value = 1980, icon = '📅'){\r\n        super(value, icon);\r\n    }\r\n}\r\n\r\nexport function AsDate(year: number, icon = '📅'){\r\n    const whole = Math.floor(year);\r\n    const fraction = year - whole;\r\n    const month = Math.floor(fraction * 12);\r\n    const name = DateSetter.Months[month];\r\n    return `${whole}-${EnsureDigits(month+1)} ${icon}`;\r\n}\r\n\r\nexport function EnsureDigits(n: number){\r\n    if(n < 10){\r\n        return '0' + n;\r\n    }\r\n    return '' + n;\r\n}","import React from 'react';\r\n\r\nexport const backgroundColor = \"grey\";\r\nexport const border = `2px solid ${backgroundColor}`;\r\nexport const margin = 5;\r\nexport const padding = margin;\r\nexport const marginTop = margin;\r\nexport const marginBottom = margin;\r\nexport const paddingBottom = margin;\r\nexport const titleFontSize = '125%';\r\n\r\nexport const Section: React.FC<{ title: string, unlocked?: boolean }> = ({title, children, unlocked = true}) => {\r\n    return <div style={{ borderBottom: border, marginBottom, marginTop, paddingBottom }}>\r\n        <SectionHeader title={title} />\r\n        {unlocked ? children : \"Locked\"}\r\n    </div>;\r\n}\r\n\r\nexport function SectionHeader(props: { title?: string, size?: number }) {\r\n    return props.title && <div style={{ fontSize: props.size ? `${props.size * 100}%` : titleFontSize, marginBottom }}>\r\n        {props.title}\r\n    </div> || null;\r\n}\r\n\r\nexport const Block: React.FC<{ }> = ({children}) => {\r\n    return <div style={{padding, margin, border}}>\r\n        {children}\r\n    </div>;\r\n}","import React from 'react';\r\nimport { Money, Research, Year } from '../Resources';\r\nimport { Task, TaskQueue } from '../stuff/tasks';\r\nimport { StatRow } from './planet';\r\nimport { Block, border, backgroundColor, SectionHeader } from './section';\r\n\r\ninterface SimpleActionProps {\r\n    name: string,\r\n    description?: string,\r\n    money?: number,\r\n    research?: number,\r\n    time?: number,\r\n    onBuy?: () => void,\r\n    blocked?: string,\r\n    buyText?: string\r\n}\r\n\r\nexport const SimpleAction: React.FC<SimpleActionProps> = props => {\r\n    const hasEnoughMoney = !props.money || Money.current >= props.money;\r\n    const hasEnoughResearch = !props.research || Research.current >= props.research;\r\n    const canAfford = hasEnoughMoney && hasEnoughResearch;\r\n\r\n    return <Block>\r\n        <SectionHeader title={props.name} size={1.1} />\r\n        <SectionHeader title={props.description} size={.9} />\r\n        <StatRow name=\"Cost\" stat={props.money} unit={Money.icon} color={hasEnoughMoney ? undefined : \"red\"} />\r\n        <StatRow name=\"Research cost\" stat={props.research} unit={Research.icon} color={hasEnoughResearch ? undefined : \"red\"} />\r\n        <StatRow name=\"Build time\" stat={props.time} unit={\" year(s)\" + Year.icon} />\r\n        {props.children}\r\n        {props.blocked ? props.blocked : <button\r\n            style={{ cursor: \"pointer\" }}\r\n            disabled={!canAfford || !!props.blocked}\r\n            onClick={() => {\r\n                if (Money.current >= (props.money || 0) && Research.current >= (props.research || 0)) {\r\n                    Money.Subtract(props.money || 0);\r\n                    Research.Subtract(props.research || 0);\r\n                    props.onBuy?.();\r\n                }\r\n            }}\r\n        >{props.buyText || \"Buy\"}</button>}\r\n    </Block>\r\n}\r\n\r\nexport const TaskProgressBar: React.FC<{ task: Task }> = props => {\r\n    const progress = props.task.percent;\r\n    return <div style={{ border, backgroundColor, margin: 5 }}>\r\n        <div style={{ backgroundColor: \"green\", height: 20, width: props.task.percentWidth }}></div>\r\n    </div>\r\n}\r\n\r\ninterface QueuedBlockingActionProps extends Omit<SimpleActionProps, 'onBuy'> {\r\n    onComplete: () => void,\r\n    time: number,\r\n    queue: TaskQueue,\r\n    limitPerId?: number,\r\n    limitPerQueue?: number,\r\n}\r\n\r\nexport function QueuedBlockingAction(props: QueuedBlockingActionProps) {\r\n\r\n    // blocking can be some max # in the entire QUEUE\r\n    // or blocking can be some max # per unique ID/action in the QUEUE.\r\n    // for now lets do per QUEUE and per action\r\n    let blocked: string | undefined = undefined;\r\n    if (props.queue.limitPerQueue) {\r\n        if (props.queue.length >= props.queue.limitPerQueue) {\r\n            blocked = \"Queue is full.\";\r\n        }\r\n    }\r\n    if (props.queue.limitPerId) {\r\n        if (props.queue.count(props.name) >= props.queue.limitPerId) {\r\n            blocked = \"In progress...\";\r\n        }\r\n    }\r\n\r\n    return <SimpleAction\r\n        {...props}\r\n        blocked={blocked}\r\n        onBuy={() => {\r\n            return props.queue.push(\r\n                new Task(props.name, Year.current, Year.current + props.time, props.onComplete)\r\n            );\r\n        }}\r\n    >\r\n        {props.queue.get(props.name).map((t, i) => <TaskProgressBar task={t} key={i} />)}\r\n    </SimpleAction>\r\n}","import React from 'react';\r\nimport { Planet, SpaceObject } from '../stuff/universe';\r\n\r\nexport function BallView({ obj, size = 100, blur = 0 }: { obj: SpaceObject, blur?: number, size?: number }) {\r\n    return (\r\n        <div style={{ position: \"relative\" }}>\r\n            <div style={{\r\n                margin: 10,\r\n                backgroundColor: obj.img ? undefined : obj.color,\r\n                borderRadius: \"100%\",\r\n                height: size,\r\n                width: size,\r\n                filter: blur ? `blur(${blur}px)` : undefined,\r\n            }}>\r\n                {obj.img ? <img src={obj.img} height={size} width={size} /> : null}\r\n            </div>\r\n            {blur ? <div style={{  position: \"absolute\", top: 'calc(50% - 20px)', left: 'calc(50% - 15px)', fontSize: 30 }}>❔</div> : null}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Research, R_ICON } from '../Resources';\r\nimport { MONTH } from '../setter';\r\nimport { PlanetResearch } from '../stages/SolarSystem';\r\nimport { TelescopeQueue } from '../stuff/tasks';\r\nimport { Planet, ROUND, SpaceObject } from '../stuff/universe';\r\nimport { QueuedBlockingAction } from './action';\r\nimport { BallView } from './ball';\r\nimport { Block, SectionHeader } from './section';\r\n\r\nfunction randomNumber() {\r\n    return Math.round(Math.random() * 1000);\r\n}\r\n\r\nfunction randomLetter() {\r\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    return chars.charAt(Math.floor(Math.random() * 26));\r\n}\r\n\r\nfunction createName() {\r\n    return `Planet ${randomLetter()}${randomLetter()}_${randomNumber()}_${randomLetter}`;\r\n}\r\n\r\nexport function StatRow(props: { color?: string, name: string, stat?: number | string, unit?: string, round?: number }) {\r\n    let displayValue = props.stat;\r\n    if (props.stat && !isNaN(props.stat as any)) {\r\n        displayValue = ROUND(Number(props.stat), props.round || 100);\r\n    }\r\n    return props.stat && <div style={{ color: props.color }}>\r\n        {props.name}: {displayValue}{props.unit}\r\n    </div> || null;\r\n}\r\n\r\nexport function SpaceObjectView({ planet }: { planet: SpaceObject | Planet }) {\r\n    const [name] = React.useState(planet.name || createName());\r\n\r\n    return (\r\n        <div style={{ padding: 10 }}>\r\n            <div style={{ fontSize: \"calc(10px + 1vmin)\" }}>{name}</div>\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n\r\n                <BallView obj={planet} />\r\n\r\n                <div>\r\n                    <StatRow name=\"Mass\" unit=\"kg\" stat={planet.mass} />\r\n                    <StatRow name=\"Diameter\" unit=\"km\" stat={planet.diameter} />\r\n                    <StatRow name=\"Distance from star\" unit=\"km\" stat={(planet as Planet).distance} />\r\n                    <StatRow name=\"Type\" stat={(planet as any).type} />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function PlanetBallView({ planet }: { planet: Planet }) {\r\n    let blur = 0;\r\n    let obj = { ...planet };\r\n    if (!planet.research || planet.research.picture == \"none\") {\r\n        delete obj.img;\r\n        blur = 5;\r\n    }\r\n    return <BallView obj={obj} blur={blur} />\r\n}\r\n\r\nexport function ResearchStat({ name, unit, stat, studied = true }: { stat?: string | number, studied?: boolean, name: string, unit?: string }) {\r\n    return <StatRow name={name} unit={unit} stat={studied ? stat : \"?\"} />;\r\n\r\n}\r\n\r\nexport function PlanetView({ planet }: { planet: Planet }) {\r\n    let name = planet.name;\r\n    if (!planet.research || !planet.research.discovered) {\r\n        name = \"Undiscovered object\";\r\n    }\r\n\r\n    return (\r\n        <Block>\r\n            <SectionHeader title={name} size={1.1} />\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n\r\n                <PlanetBallView planet={planet} />\r\n\r\n                <div>\r\n                    <ResearchStat name=\"Mass\" unit=\"kg\" stat={planet.mass} studied={!!planet.research?.studied && planet.research?.studied != 'none'} />\r\n                    <ResearchStat name=\"Diameter\" unit=\"km\" stat={planet.diameter} studied={!!planet.research?.studied} />\r\n                    <ResearchStat name=\"Type\" stat={planet.type} studied={!!planet.research?.studied} />\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {planet.research?.discovered || planet.research?.studied === \"none\" ?\r\n                \"discovered\"\r\n                :\r\n                <QueuedBlockingAction\r\n                    name={`Study ${planet.name || name}`}\r\n                    description={`Use your telescope to study the unkown object and learn more about it. Earns 1 ${R_ICON}`}\r\n                    queue={TelescopeQueue}\r\n                    time={3 * MONTH}\r\n                    buyText=\"Study\"\r\n                    onComplete={() => {\r\n                        planet.research = planet.research || {} as any;\r\n                        planet.research!.discovered = true;\r\n                        planet.research!.studied = \"telescope\";\r\n                        Research.Add(1);\r\n                    }}\r\n                />\r\n            }\r\n        </Block>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Planet, Star } from '../stuff/universe';\r\nimport { BallView } from './ball';\r\n\r\nexport function System(props: { star: Star }) {\r\n    let maxDistance = 0;\r\n    let maxDiameter = 0;\r\n    for (const planet of props.star.planets) {\r\n        maxDistance = Math.max(maxDistance, planet.distance);\r\n        maxDiameter = Math.max(maxDiameter, planet.diameter || 1);\r\n    }\r\n    console.log(\"max diamater\", maxDiameter);\r\n    return <div style={{ borderBottom: \"2px solid grey\", padding: 10, display: \"flex\", flexDirection: \"row\" }}>\r\n        <BallView obj={props.star as any} size={80} />\r\n        <div style={{ position: \"relative\", flex:\"auto\", marginRight: 10 }}>\r\n            {props.star.planets.map((p,i) => <PositionBallView\r\n                index={i+1}\r\n                maxIndex={props.star.planets.length}\r\n                size={50}\r\n                planet={p}\r\n                maxDistance={maxDistance}\r\n                maxDiameter={maxDiameter}\r\n            />)}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport function PositionBallView({ planet, index, maxIndex, maxDistance, maxDiameter, size = 50 }: { planet: Planet, index:number, maxIndex: number, maxDistance: number, maxDiameter?: number, size?: number }) {\r\n    const diameter = (maxDiameter ? size * (planet.diameter || 1) / maxDiameter : size) + 10;\r\n    const scale = 1;\r\n    const distance = 100 * Math.pow(planet.distance, scale) / Math.pow(maxDistance, scale);\r\n    const proportion = 100* index / maxIndex;\r\n    const testDist = (distance + proportion) / 2;\r\n    return (\r\n        <div style={{\r\n            position: \"absolute\",\r\n            top: `calc(50% - ${.5 * diameter}px)`,\r\n            left: `calc(${testDist}% - ${diameter}px)`,\r\n            backgroundColor: planet.color,\r\n            borderRadius: \"50%\",\r\n            height: diameter,\r\n            width: diameter\r\n        }}></div>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/mercuryimg.d800f48b.png\";","import React from \"react\";\r\nimport { PlanetView, SpaceObjectView, StatRow } from \"../components/planet\";\r\nimport { System } from \"../components/system\";\r\nimport { Money, Year } from \"../Resources\";\r\nimport { BILLION, MILLION, Planet, Probe, ROUND, SpaceObject, Star } from \"../stuff/universe\";\r\nimport { ResearchOption } from \"./EarthStage\";\r\nimport mercuryimg from \"../images/mercuryimg.png\";\r\nimport earthimg from \"../images/earthimg.png\";\r\nimport moonimg from \"../images/moonimg.png\";\r\nimport { Tabs } from \"../components/tabs\";\r\n\r\nexport const Mercury: Planet = {\r\n    name: \"Mercury\",\r\n    img: mercuryimg,\r\n    color: \"grey\",\r\n    age: 4 * BILLION,\r\n    distance: 61.157 * MILLION,\r\n    type: \"rocky\",\r\n    diameter: 4879,\r\n    mass: 3.285e23,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Venus: Planet = {\r\n    name: \"Venus\",\r\n    color: \"bisque\",\r\n    age: 4 * BILLION,\r\n    distance: 108.44 * MILLION,\r\n    type: \"venuslike\",\r\n    diameter: 12104,\r\n    mass: 4.867e24,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Moon: Planet = {\r\n    name: \"Moon\",\r\n    img: moonimg,\r\n    color: \"grey\",\r\n    age: 4 * BILLION,\r\n    distance: 384400,\r\n    type: \"rocky\",\r\n    diameter: 3474,\r\n    mass: 7.348e22,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Earth: Planet = {\r\n    name: \"Earth\",\r\n    img: earthimg,\r\n    color: \"#18F\",\r\n    age: 4 * BILLION,\r\n    distance: 149.6 * MILLION,\r\n    type: \"rocky\",\r\n    diameter: 12742,\r\n    mass: 5.972e24,\r\n    percentUtilization: .5,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: [],\r\n    moons: [Moon],\r\n    research: {\r\n        discovered: true,\r\n        studied: \"human\",\r\n        picture: \"none\",\r\n        temperature: \"human\",\r\n        soil: \"human\",\r\n        water: \"human\",\r\n        atmosphere: \"human\",\r\n    }\r\n};\r\n\r\nexport const Mars: Planet = {\r\n    name: \"Mars\",\r\n    color: \"red\",\r\n    age: 4 * BILLION,\r\n    distance: 228.16 * MILLION,\r\n    type: \"rocky\",\r\n    diameter: 6779,\r\n    mass: 6.39e23,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\n\r\nexport const Jupiter: Planet = {\r\n    name: \"Jupiter\",\r\n    color: \"orange\",\r\n    age: 4 * BILLION,\r\n    distance: 762.51 * MILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 139820,\r\n    mass: 1.898e27,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Saturn: Planet = {\r\n    name: \"Saturn\",\r\n    color: \"tan\",\r\n    age: 4 * BILLION,\r\n    distance: 926.57 * MILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 116360,\r\n    mass: 5.683e26,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Uranus: Planet = {\r\n    name: \"Uranus\",\r\n    color: \"lightblue\",\r\n    age: 4 * BILLION,\r\n    distance: 2.9575 * BILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 50724,\r\n    mass: 8.681e25,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Neptune: Planet = {\r\n    name: \"Neptune\",\r\n    color: \"blue\",\r\n    age: 4 * BILLION,\r\n    distance: 4.4759 * BILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 49244,\r\n    mass: 1.024e26,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Sun = {\r\n    name: \"Sun\",\r\n    color: \"yellow\",\r\n    age: 4.5 * BILLION,\r\n    distance: 0,\r\n    type: \"sunlike\",\r\n    death: 7.5 * BILLION,\r\n    mass: 1.989e30, // KG\r\n    diameter: 1391000, // KM\r\n    incomingProbes: [],\r\n    planets: [\r\n        Mercury,\r\n        Venus,\r\n        Earth,\r\n        Mars,\r\n        Jupiter,\r\n        Saturn,\r\n        Uranus,\r\n        Neptune,\r\n    ],\r\n} as Star;\r\n\r\nexport function SolarSystem(props: { star: Star }) {\r\n    const launchCost = .1;\r\n    return <div>\r\n        <div style={{ position: \"relative\" }}>\r\n            <System star={props.star} />\r\n        </div>\r\n\r\n        <Tabs tabs={\r\n            [\r\n                {\r\n                    title: \"Sun\",\r\n                    content: <PlanetView planet={props.star as any} />\r\n                } ,\r\n                ...props.star.planets.map(p => ({\r\n                    title: p.name && p.research?.discovered ? p.name :\"?\",\r\n                    content: <div>\r\n                        <PlanetView planet={p} />\r\n                        \r\n                    </div>\r\n                }))\r\n            ]\r\n        } />\r\n\r\n    </div>\r\n}\r\n/*\r\n{p.incomingProbes.map(probe => <ProbeView probe={probe} />)}\r\n{p !== Earth ?\r\n    <button\r\n        style={{ cursor: \"pointer\" }}\r\n        disabled={Earth.availableProbes.length === 0 || Money.current < launchCost}\r\n        onClick={() => {\r\n            const probe = Earth.availableProbes.pop()!;\r\n            probe.launchYear = Year.current;\r\n            probe.arrivalYear = Year.current + Math.abs(p.distance - Earth.distance) / 8.76e7;\r\n            p.incomingProbes.push(probe);\r\n            Money.Subtract(launchCost);\r\n        }}\r\n    >Launch probe\r\n    ({launchCost} billion {Money.icon})\r\n    ({ROUND(Math.abs(p.distance - Earth.distance) / 8.76e7)} years)\r\n    </button>\r\n    : null}\r\n    */\r\n\r\nexport function ProbeView({ probe }: { probe: Probe }) {\r\n    return <div>\r\n        <div>🛰️</div>\r\n        <StatRow name=\"Launched\" stat={probe.launchYear} round={1} />\r\n        <StatRow name={probe.arrivalYear! < Year.current ? \"Arrived\" : \"Arriving\"} stat={probe.arrivalYear} round={1} />\r\n        <ProbeProgressBar probe={probe} />\r\n    </div>\r\n}\r\n\r\nexport function ProbeProgressBar({ probe }: { probe: Probe }) {\r\n    if (Year.current > probe.arrivalYear! + 5) { return null; }\r\n    let color = \"red\";\r\n    if (Year.current > probe.arrivalYear!) { color = \"green\"; }\r\n    const progress = (probe.arrivalYear! - Year.current) / (probe.arrivalYear! - probe.launchYear!);\r\n    return <div style={{ display: \"flex\", marginRight: 10, backgroundColor: \"grey\" }}>\r\n        <div style={{ width: (100 - (progress * 100)) + \"%\", height: 10, backgroundColor: color }}></div>\r\n    </div>\r\n}\r\n\r\n// this defines what we have actually DISCOVERED and sent there.\r\nexport type level = \"none\" | \"telescope\" | \"probe\" | \"lander\" | \"returned sample\" | \"human\";\r\nexport interface PlanetResearch {\r\n    /** This starts false */\r\n    discovered: boolean,\r\n\r\n    /** after study, you can now send probes there, etc */\r\n    studied: level,\r\n\r\n    picture: level,\r\n    temperature: level,\r\n    atmosphere: level,\r\n    soil: level,\r\n    water: level,\r\n}","export default __webpack_public_path__ + \"static/media/earthimg.eeca67e5.png\";","export default __webpack_public_path__ + \"static/media/moonimg.d38055fa.png\";","import { DateSetter, Setter } from \"./setter\";\r\nimport { Sun } from \"./stages/SolarSystem\";\r\nimport { ManufacturingQueue, ResearchQueue, TelescopeQueue, ProbeQueue } from \"./stuff/tasks\";\r\n\r\nexport const Y_ICON = '📅';\r\nexport const R_ICON = '🧪';\r\nexport const M_ICON = '💲';\r\nexport const B_ICON = '📈';\r\n\r\nexport const Year = new DateSetter(2000);\r\nexport const Research = new Setter(0, '🧪');\r\nexport const Money = new Setter(1, '💲');\r\nexport const Budget = new Setter(.1, '📈');\r\n\r\nsetInterval(() => {\r\n    Year.AddMonth();\r\n    UpdateProbes(); // TODP: make this a queue too\r\n\r\n    // TODO: could make all queues auto-update on creation...\r\n    ManufacturingQueue.update(Year.current);\r\n    ResearchQueue.update(Year.current);\r\n    TelescopeQueue.update(Year.current);\r\n    ProbeQueue.update(Year.current);\r\n\r\n    Money.Add(Budget.current);\r\n}, 2000);\r\n\r\nfunction UpdateProbes() {\r\n    for (const planet of Sun.planets) {\r\n        planet.incomingProbes = planet.incomingProbes.filter(incomingProbe => {\r\n            const hasArrived = incomingProbe.arrivalYear! <= Year.current;\r\n            if (hasArrived) {\r\n                // get 1 science on arrival!\r\n                Research.Add(1);\r\n                planet.availableProbes.push(incomingProbe);\r\n                return false;\r\n            }\r\n\r\n            //still on its way\r\n            return true;\r\n        })\r\n    }\r\n}","import { Year } from \"../Resources\";\r\nimport { ROUND } from \"./universe\";\r\n\r\nexport class Task {\r\n    isComplete = false;\r\n    callbacks: (() => void)[] = [];\r\n\r\n    constructor(\r\n        public readonly id: string,\r\n        public readonly startYear: number,\r\n        public readonly endYear: number,\r\n        callback?: () => void\r\n    ) {\r\n        if (callback) {\r\n            this.addOnComplete(callback);\r\n        }\r\n    }\r\n\r\n    getProgress(currentYear: number) {\r\n        if (this.isComplete) { return 1; }\r\n        return (currentYear - this.startYear) / (this.endYear - this.startYear);\r\n    }\r\n\r\n    get percent() {\r\n        return ROUND(this.getProgress(Year.current) * 100, 100);\r\n    }\r\n\r\n    get percentWidth() {\r\n        return `${this.percent}%`;\r\n    }\r\n\r\n    addOnComplete(callback: () => void) {\r\n        this.callbacks.push(callback);\r\n    }\r\n\r\n    complete(currentYear: number) {\r\n        if (this.isComplete) { return true; }\r\n        if (currentYear >= this.endYear && !this.isComplete) {\r\n            this.isComplete = true;\r\n            this.callbacks.forEach(c => c());\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class TaskQueue {\r\n    private queue: Task[] = [];\r\n\r\n    // TODO: control how these can be modified\r\n    constructor(public limitPerId?: number, public limitPerQueue?: number) { }\r\n\r\n    private onChange = () => {};\r\n    Register(onchange: () => void) {\r\n        this.onChange = onchange;\r\n    }\r\n\r\n    push(task: Task): Task {\r\n        // TODO: enforce the limits!\r\n        // add in SORTED order\r\n        let i = 0;\r\n        while (i < this.queue.length && this.queue[i].endYear < task.endYear) {\r\n            i++;\r\n        }\r\n        this.queue.splice(i, 0, task);\r\n        this.onChange();\r\n        return task;\r\n    }\r\n\r\n    update(year: number) {\r\n        let hasChanged = false;\r\n        // check first items until they are all done\r\n        while (this.queue.length && this.queue[0].endYear <= year) {\r\n            const completedTask = this.queue.shift();\r\n            completedTask?.complete(year);\r\n            hasChanged = true;\r\n        }\r\n        if (hasChanged) {\r\n            this.onChange();\r\n        }\r\n    }\r\n\r\n    get length() {\r\n        return this.queue.length;\r\n    }\r\n\r\n    count(id: string) {\r\n        return this.queue.filter(t => t.id === id).length;\r\n    }\r\n\r\n    get(id: string): Task[] {\r\n        return this.queue.filter(t => t.id === id)\r\n    }\r\n}\r\n\r\n// manufacturing can only do 1 thing at a time globally\r\nexport const ManufacturingQueue = new TaskQueue(1, 1);\r\n\r\n// research queue can do one of each at a time\r\nexport const ResearchQueue = new TaskQueue(1);\r\n\r\n// probe queue can do all of the things\r\nexport const ProbeQueue = new TaskQueue();\r\n\r\n// telescope can only do 1 thing at a time!\r\nexport const TelescopeQueue = new TaskQueue(1, 1);","import { Task } from \"../stuff/tasks\";\r\nimport { ProbeContainer } from \"./probe\";\r\n\r\nexport class GalaxyContainer {\r\n    constructor(public readonly totalStars: number, public readonly startYear: number, private techtree: ProbeContainer) { }\r\n\r\n    public currentYear = this.startYear;\r\n    public probeProducingStars = 1;\r\n    public runningProbes: Task[] = [];\r\n    public launchedProbes = 0;\r\n    public activeProbes = 0;\r\n\r\n    get unexploredPlanets() { return this.totalStars - this.probeProducingStars; }\r\n\r\n    run100Years() {\r\n        this.currentYear += 100;\r\n        this.runningProbes = this.runningProbes.filter(task => !task.complete(this.currentYear));\r\n\r\n        // can't have more systems than stars!\r\n        this.probeProducingStars = Math.min(this.totalStars, this.probeProducingStars);\r\n\r\n        // say it takes 10 years to create a entire probe thing\r\n        const newProbes = this.probeProducingStars * this.techtree.probesPer100Years.get();\r\n        this.activeProbes += newProbes;\r\n        this.launchedProbes += newProbes;\r\n        this.runningProbes.push(\r\n            new Task(\r\n                \"send ai probes\",\r\n                this.currentYear,\r\n                this.currentYear + this.techtree.interstarYears.get() + this.techtree.yearsToCreateAProbeFromDiscovery.get(),\r\n                () => {\r\n                    this.activeProbes -= newProbes;\r\n                    let successfulProbes = Math.floor(this.techtree.successRate.get() * newProbes);\r\n                    if(newProbes < 10000){\r\n                        successfulProbes = 0;\r\n                        // run each one!\r\n                        for(let i = 0; i <newProbes;i++){\r\n                            if(Math.random() < this.techtree.successRate.get()){\r\n                                successfulProbes++;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.probeProducingStars += successfulProbes;\r\n                }));\r\n    }\r\n}","\r\nexport class Trait<T> {\r\n    constructor(private researchLevels: T[]) { }\r\n    private level = 0;\r\n\r\n    get(): T {\r\n        return this.researchLevels[this.level];\r\n    }\r\n\r\n    get isMaxed() {\r\n        return this.level >= this.researchLevels.length - 1;\r\n    }\r\n\r\n    increase() {\r\n        if (!this.isMaxed) { this.level++; }\r\n    }\r\n}\r\nexport class ProbeContainer {\r\n    public yearsToCreateAProbeFromDiscovery = new Trait([1000, 500, 250, 100]);\r\n    public probesPer100Years = new Trait([1, 2, 5, 10, 25, 50, 100, 1000]);\r\n    public interstarYears = new Trait([10000, 5000, 1000, 150]);\r\n    public successRate = new Trait([.05, .1, 33, .5, .7]);\r\n    public researchSent = new Trait([1.1, 1.25, 1.5, 2, 5, 10]);\r\n    public research = 0;\r\n}\r\n","import { MONTH } from \"../setter\";\r\n\r\nexport class Tech {\r\n    static All: Tech[] = [];\r\n    static Unlocked: Tech[] = [];\r\n    static IsUnlocked(tech: Tech){\r\n        return !!Tech.Unlocked.find(t => t.id === tech.id)\r\n    }\r\n;\r\n\r\n    constructor(\r\n        public readonly id: string,\r\n        public readonly researchCost: number,\r\n        public readonly dependsOn: Tech[] = [],\r\n        public readonly researchTime = 1,\r\n    ) { \r\n        if(!Tech.All.find(t => t.id === this.id)){\r\n            Tech.All.push(this);\r\n        }\r\n        else {\r\n            throw \"Hey! Duplicate tech!\" + id;\r\n        }\r\n    }\r\n\r\n    get canBuy(){\r\n        return this.dependsOn.filter(dep => dep.unlocked).length == this.dependsOn.length;\r\n    }\r\n\r\n    get unlocked(){\r\n        return Tech.IsUnlocked(this);\r\n    }\r\n\r\n    unlock() {\r\n        if(this.canBuy && !this.unlocked){\r\n            Tech.Unlocked.push(this);\r\n        }\r\n    }\r\n}\r\n\r\nexport const GroundTelescope = new Tech(\"Telescope\", 0, [], 6 * MONTH);\r\nexport const Rocketry = new Tech(\"Rocketry\", 5);\r\nexport const Probes = new Tech(\"Probes\", 1, [GroundTelescope, Rocketry]);\r\nexport const Lander = new Tech(\"Lander\", 10, [Probes]);\r\nexport const SpaceTelescope = new Tech(\"Space Telescope\", 10, [GroundTelescope, Rocketry]);\r\n\r\nexport const InterstellarTravel = new Tech(\"Interstellar travel\", 1000, [Rocketry, GroundTelescope]);","import React from 'react';\r\nimport { Earth } from './SolarSystem';\r\nimport { Budget, Money, Research, Year } from '../Resources';\r\nimport { PlanetView, StatRow } from '../components/planet';\r\nimport { ManufacturingQueue, ResearchQueue, Task, TaskQueue } from '../stuff/tasks';\r\nimport { Section } from '../components/section';\r\nimport { QueuedBlockingAction } from '../components/action';\r\nimport { MONTH } from '../setter';\r\nimport { Tech } from '../stuff/tech';\r\n\r\nexport function EarthStage(props: {}) {\r\n    return <Section title=\"Earth\">\r\n        <PlanetView planet={Earth} />\r\n\r\n        <div style={{ borderBottom: \"2px solid grey\" }}></div>\r\n        <Probes />\r\n        <EarthManufacturing />\r\n        <ResearchStore />\r\n    </Section>\r\n}\r\n\r\n// so we should have like a STORE\r\n\r\nexport function Probes(props: {}) {\r\n    return <Section title=\"Inventory\">\r\n        <div>\r\n            Ground telescopes available: {Earth.availableTelescopes?.filter(t => t.type == 'ground').length || 0} 🔭\r\n        </div>\r\n        <div>\r\n            Probes available: {Earth.availableProbes.length} 🛰️\r\n        </div>\r\n    </Section>\r\n}\r\n\r\nexport function EarthManufacturing(props: {}) {\r\n    // manufacturing has say... some fixed number of slots that can be used\r\n    return <Section title=\"Manufacture\">\r\n        {!Earth.availableTelescopes?.filter(t => t.type == 'ground').length ?\r\n            <QueuedBlockingAction\r\n                name=\"Ground telescope\"\r\n                description=\"Build a telescope on Earth to allow you to look at distant objects.\"\r\n                money={1}\r\n                time={2 * MONTH}\r\n                queue={ManufacturingQueue}\r\n                onComplete={() => {\r\n                    Earth.availableTelescopes = Earth.availableTelescopes || [];\r\n                    Earth.availableTelescopes!.push({ manufactureDate: Year.current, condition: 1, type: \"ground\", quality: \"blurry\" });\r\n                }}\r\n            /> :\r\n            <QueuedBlockingAction\r\n                name=\"Space probe\"\r\n                description=\"Build a probe that you can launch to other planets to perform research.\"\r\n                money={1}\r\n                time={1}\r\n                queue={ManufacturingQueue}\r\n                onComplete={() => {\r\n                    Earth.availableProbes.push({ manufactureDate: Year.current });\r\n                }}\r\n            />\r\n        }\r\n    </Section>\r\n}\r\n\r\n\r\n// so we should have like a STORE\r\n\r\nexport function ResearchStore(props: {}) {\r\n    const moneyStuff = <>\r\n        <QueuedBlockingAction\r\n            name=\"Raise funds\"\r\n            description={`Raise ${1} billion 💲`}\r\n            research={1}\r\n            time={.5}\r\n            queue={ResearchQueue}\r\n            onComplete={() => { Money.Add(1) }}\r\n            buyText=\"Start\"\r\n        />\r\n        <QueuedBlockingAction\r\n            name=\"Increase budget\"\r\n            description={`Increases the monthly budget by ${.1} billion 💲`}\r\n            money={1}\r\n            research={1}\r\n            time={.5}\r\n            queue={ResearchQueue}\r\n            onComplete={() => { Budget.Add(.1); }}\r\n        />\r\n    </>;\r\n    return <Section title=\"Research\">\r\n        {Tech.All.filter(tech => tech.canBuy && !tech.unlocked).map(tech => <QueuedBlockingAction\r\n            name={tech.id}\r\n            onComplete={() => { tech.unlock() }}\r\n            queue={ResearchQueue}\r\n            time={tech.researchTime}\r\n            research={tech.researchCost}\r\n        />)}\r\n    </Section>\r\n}\r\n\r\nexport function ResearchOption(props: { name: string, money?: number, research?: number, onBuy?: () => void }) {\r\n    const hasEnoughMoney = !props.money || Money.current >= props.money;\r\n    const hasEnoughResearch = !props.research || Research.current >= props.research;\r\n    const canAfford = hasEnoughMoney && hasEnoughResearch;\r\n\r\n    return <div style={{ margin: 10, padding: 10, border: \"2px solid grey\" }}>\r\n        <div>{props.name}</div>\r\n        <StatRow name=\"Money\" stat={props.money} unit={Money.icon} color={hasEnoughMoney ? undefined : \"red\"} />\r\n        <StatRow name=\"Research\" stat={props.research} unit={Research.icon} color={hasEnoughResearch ? undefined : \"red\"} />\r\n        <button\r\n            style={{ cursor: \"pointer\" }}\r\n            disabled={!canAfford}\r\n            onClick={() => {\r\n                if (Money.current >= (props.money || 0) && Research.current >= (props.research || 0)) {\r\n                    Money.Subtract(props.money || 0);\r\n                    Research.Subtract(props.research || 0);\r\n                    props.onBuy?.();\r\n                }\r\n            }}\r\n        >\r\n            Buy\r\n        </button>\r\n    </div>\r\n}","import React from 'react';\nimport './App.css';\nimport { Tabs } from './components/tabs';\nimport { GalaxyContainer } from './simplified/galaxy';\nimport { ProbeContainer } from './simplified/probe';\nimport { SolarSystem, Sun } from './stages/SolarSystem';\nimport { ROUND } from './stuff/universe';\nimport { Budget, Money, Research, Year } from './Resources';\nimport { EarthManufacturing, ResearchStore, Probes } from './stages/EarthStage';\nimport { ResearchQueue, ManufacturingQueue, ProbeQueue, TelescopeQueue } from './stuff/tasks';\nimport { GroundTelescope, InterstellarTravel } from './stuff/tech';\n\nconst TechTree = new ProbeContainer();\nconst MilkyWay = new GalaxyContainer(100000000000, 2000, TechTree);\n\nfunction App() {\n  const [year, setYear] = React.useState(Year.current);\n  Year.Register(setYear);\n\n  const [research, setResearch] = React.useState(Research.current);\n  Research.Register(setResearch);\n\n  const [money, setMoney] = React.useState(Money.current);\n  Money.Register(setMoney);\n\n  const [budget, setBudget] = React.useState(Budget.current);\n  Budget.Register(setBudget);\n\n  // register ALLL  the queues...😭\n\n  const [queueChanger, setQueues] = React.useState({});\n  const triggerQueues = () => { setQueues({}); };\n\n  ResearchQueue.Register(triggerQueues);\n  ManufacturingQueue.Register(triggerQueues);\n  ProbeQueue.Register(triggerQueues);\n  TelescopeQueue.Register(triggerQueues);\n\n  const run100Years = () => {\n    MilkyWay.run100Years();\n    setYear(MilkyWay.currentYear);\n  };\n\n  const run1000Years = () => {\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    setYear(MilkyWay.currentYear);\n  };\n\n  const run10000Years = () => {\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    setYear(MilkyWay.currentYear);\n  };\n\n  const galaxyStuff = <><div>Year {MilkyWay.currentYear}</div>\n    <div>Milky Way</div>\n    <div>Total Stars: {MilkyWay.totalStars}</div>\n    <div>Untouched Stars: {MilkyWay.unexploredPlanets}</div>\n    <div>Probe producing Stars: {MilkyWay.probeProducingStars}</div>\n    <div>% of MilkyWay producing: {Math.floor(MilkyWay.probeProducingStars * 100000 / MilkyWay.totalStars) / 1000}%</div>\n    <div>Probes launched: {MilkyWay.launchedProbes}</div>\n    <div>Active probes: {MilkyWay.activeProbes}</div>\n    <div></div>\n    <div></div>\n    <div>\n      <button onClick={run100Years}>Run 100 years</button>\n      <button onClick={run1000Years}>Run 1000 years</button>\n      <button onClick={run10000Years}>Run 10000 years</button>\n    </div></>;\n\n  return (\n    <div style={{ backgroundColor: \"#333\", minHeight: \"100vh\", color: \"white\", padding: 10, fontFamily: 'Courier New, monospace' }}>\n      <div style={{ fontSize: \"calc(10px + 2vmin)\", marginBottom: 10 }}>Universal</div>\n      <div style={{ marginBottom: 5 }}>Year: {Year.date}</div>\n      <div style={{ marginBottom: 5 }}>Research: {research}🧪</div>\n      <div style={{ marginBottom: 5 }}>Money: {ROUND(money)} billion 💲</div>\n      <div style={{ marginBottom: 5 }}>Budget: {ROUND(budget)} billion 📈</div>\n      <Tabs\n        tabs={[\n          { title: \"Research\", content: <ResearchStore /> },\n          { title: \"Build\", content: <><Probes /><EarthManufacturing /></>, requires: GroundTelescope },\n          { title: \"Solar System\", content: <SolarSystem star={Sun} />, requires: GroundTelescope },\n          { title: \"Milky Way\", content: galaxyStuff, requires: InterstellarTravel },\n        ]}\n      />\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}