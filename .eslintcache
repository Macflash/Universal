[{"C:\\Users\\Alex\\universal\\src\\index.tsx":"1","C:\\Users\\Alex\\universal\\src\\reportWebVitals.ts":"2","C:\\Users\\Alex\\universal\\src\\App.tsx":"3","C:\\Users\\Alex\\universal\\src\\components\\planet.tsx":"4","C:\\Users\\Alex\\universal\\src\\components\\ball.tsx":"5","C:\\Users\\Alex\\universal\\src\\simplified\\galaxy.ts":"6","C:\\Users\\Alex\\universal\\src\\stuff\\tasks.ts":"7","C:\\Users\\Alex\\universal\\src\\simplified\\probe.ts":"8","C:\\Users\\Alex\\universal\\src\\stages\\SolarSystem.tsx":"9","C:\\Users\\Alex\\universal\\src\\stuff\\universe.ts":"10","C:\\Users\\Alex\\universal\\src\\components\\tabs.tsx":"11","C:\\Users\\Alex\\universal\\src\\components\\system.tsx":"12","C:\\Users\\Alex\\universal\\src\\setter.tsx":"13","C:\\Users\\Alex\\universal\\src\\stages\\EarthStage.tsx":"14","C:\\Users\\Alex\\universal\\src\\Resources.ts":"15","C:\\Users\\Alex\\universal\\src\\components\\section.tsx":"16","C:\\Users\\Alex\\universal\\src\\components\\action.tsx":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":3697,"mtime":1609963920113,"results":"21","hashOfConfig":"19"},{"size":4247,"mtime":1609964390428,"results":"22","hashOfConfig":"19"},{"size":837,"mtime":1609950250362,"results":"23","hashOfConfig":"19"},{"size":1989,"mtime":1609944809825,"results":"24","hashOfConfig":"19"},{"size":2458,"mtime":1609952693091,"results":"25","hashOfConfig":"19"},{"size":753,"mtime":1609809184989,"results":"26","hashOfConfig":"19"},{"size":6667,"mtime":1609964739703,"results":"27","hashOfConfig":"19"},{"size":2574,"mtime":1609963791138,"results":"28","hashOfConfig":"19"},{"size":1101,"mtime":1609946926810,"results":"29","hashOfConfig":"19"},{"size":1905,"mtime":1609911276437,"results":"30","hashOfConfig":"19"},{"size":1754,"mtime":1609947188303,"results":"31","hashOfConfig":"19"},{"size":4662,"mtime":1609964556947,"results":"32","hashOfConfig":"19"},{"size":1405,"mtime":1609951735445,"results":"33","hashOfConfig":"19"},{"size":1025,"mtime":1609943353083,"results":"34","hashOfConfig":"19"},{"size":3307,"mtime":1609952450658,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1npj9no",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"38"},"C:\\Users\\Alex\\universal\\src\\index.tsx",[],["79","80"],"C:\\Users\\Alex\\universal\\src\\reportWebVitals.ts",[],"C:\\Users\\Alex\\universal\\src\\App.tsx",["81","82","83"],"import React from 'react';\nimport './App.css';\nimport { EarthManufacturing, EarthStage, ManufacturingQueue, ProbeQueue, Probes, ResearchQueue, ResearchStore, TelescopeQueue } from './stages/EarthStage';\nimport { Tabs } from './components/tabs';\nimport { GalaxyContainer } from './simplified/galaxy';\nimport { ProbeContainer } from './simplified/probe';\nimport { SolarSystem, Sun } from './stages/SolarSystem';\nimport { ROUND } from './stuff/universe';\nimport { Budget, Money, Research, Year } from './Resources';\n\nconst TechTree = new ProbeContainer();\nconst MilkyWay = new GalaxyContainer(100000000000, 2000, TechTree);\n\nfunction App() {\n  const [year, setYear] = React.useState(Year.current);\n  Year.Register(setYear);\n\n  const [research, setResearch] = React.useState(Research.current);\n  Research.Register(setResearch);\n\n  const [money, setMoney] = React.useState(Money.current);\n  Money.Register(setMoney);\n\n  const [budget, setBudget] = React.useState(Budget.current);\n  Budget.Register(setBudget);\n\n  // register ALLL  the queues...😭\n\n  const [queueChanger, setQueues] = React.useState({});\n  const triggerQueues = () => { setQueues({}); };\n\n  ResearchQueue.Register(triggerQueues);\n  ManufacturingQueue.Register(triggerQueues);\n  ProbeQueue.Register(triggerQueues);\n  TelescopeQueue.Register(triggerQueues);\n\n  const run100Years = () => {\n    MilkyWay.run100Years();\n    setYear(MilkyWay.currentYear);\n  };\n\n  const run1000Years = () => {\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    MilkyWay.run100Years();\n    setYear(MilkyWay.currentYear);\n  };\n\n  const run10000Years = () => {\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    run1000Years();\n    setYear(MilkyWay.currentYear);\n  };\n\n  const galaxyStuff = <><div>Year {MilkyWay.currentYear}</div>\n    <div>Milky Way</div>\n    <div>Total Stars: {MilkyWay.totalStars}</div>\n    <div>Untouched Stars: {MilkyWay.unexploredPlanets}</div>\n    <div>Probe producing Stars: {MilkyWay.probeProducingStars}</div>\n    <div>% of MilkyWay producing: {Math.floor(MilkyWay.probeProducingStars * 100000 / MilkyWay.totalStars) / 1000}%</div>\n    <div>Probes launched: {MilkyWay.launchedProbes}</div>\n    <div>Active probes: {MilkyWay.activeProbes}</div>\n    <div></div>\n    <div></div>\n    <div>\n      <button onClick={run100Years}>Run 100 years</button>\n      <button onClick={run1000Years}>Run 1000 years</button>\n      <button onClick={run10000Years}>Run 10000 years</button>\n    </div></>;\n\n  return (\n    <div style={{ backgroundColor: \"#333\", minHeight: \"100vh\", color: \"white\", padding: 10, fontFamily: 'Courier New, monospace' }}>\n      <div style={{ fontSize: \"calc(10px + 2vmin)\", marginBottom: 10 }}>Universal</div>\n      <div style={{ marginBottom: 5 }}>Year: {Year.date}</div>\n      <div style={{ marginBottom: 5 }}>Research: {research}🧪</div>\n      <div style={{ marginBottom: 5 }}>Money: {ROUND(money)} billion 💲</div>\n      <div style={{ marginBottom: 5 }}>Budget: {ROUND(budget)} billion 📈</div>\n      <Tabs\n        tabs={[\n          { title: \"Space center\", content: <><Probes/><EarthManufacturing /></>},\n          { title: \"Research center\", content: <ResearchStore /> },\n          { title: \"Solar System\", content: <SolarSystem star={Sun} /> },\n          { title: \"Milky Way\", content: galaxyStuff, locked: true },\n        ]}\n      />\n\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Alex\\universal\\src\\components\\planet.tsx",["84","85","86","87","88"],"import React from 'react';\r\nimport { Research, R_ICON } from '../Resources';\r\nimport { MONTH } from '../setter';\r\nimport { TelescopeQueue } from '../stages/EarthStage';\r\nimport { PlanetResearch } from '../stages/SolarSystem';\r\nimport { Planet, ROUND, SpaceObject } from '../stuff/universe';\r\nimport { QueuedBlockingAction } from './action';\r\nimport { BallView } from './ball';\r\nimport { Block, SectionHeader } from './section';\r\n\r\nfunction randomNumber() {\r\n    return Math.round(Math.random() * 1000);\r\n}\r\n\r\nfunction randomLetter() {\r\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    return chars.charAt(Math.floor(Math.random() * 26));\r\n}\r\n\r\nfunction createName() {\r\n    return `Planet ${randomLetter()}${randomLetter()}_${randomNumber()}_${randomLetter}`;\r\n}\r\n\r\nexport function StatRow(props: { color?: string, name: string, stat?: number | string, unit?: string, round?: number }) {\r\n    let displayValue = props.stat;\r\n    if (props.stat && !isNaN(props.stat as any)) {\r\n        displayValue = ROUND(Number(props.stat), props.round || 100);\r\n    }\r\n    return props.stat && <div style={{ color: props.color }}>\r\n        {props.name}: {displayValue}{props.unit}\r\n    </div> || null;\r\n}\r\n\r\nexport function SpaceObjectView({ planet }: { planet: SpaceObject | Planet }) {\r\n    const [name] = React.useState(planet.name || createName());\r\n\r\n    return (\r\n        <div style={{ padding: 10 }}>\r\n            <div style={{ fontSize: \"calc(10px + 1vmin)\" }}>{name}</div>\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n\r\n                <BallView obj={planet} />\r\n\r\n                <div>\r\n                    <StatRow name=\"Mass\" unit=\"kg\" stat={planet.mass} />\r\n                    <StatRow name=\"Diameter\" unit=\"km\" stat={planet.diameter} />\r\n                    <StatRow name=\"Distance from star\" unit=\"km\" stat={(planet as Planet).distance} />\r\n                    <StatRow name=\"Type\" stat={(planet as any).type} />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function PlanetBallView({ planet }: { planet: Planet }) {\r\n    let blur = 0;\r\n    let obj = { ...planet };\r\n    if (!planet.research || planet.research.picture == \"none\") {\r\n        delete obj.img;\r\n        blur = 5;\r\n    }\r\n    return <BallView obj={obj} blur={blur} />\r\n}\r\n\r\nexport function ResearchStat({ name, unit, stat, studied = true }: { stat?: string | number, studied?: boolean, name: string, unit?: string }) {\r\n    return <StatRow name={name} unit={unit} stat={studied ? stat : \"?\"} />;\r\n\r\n}\r\n\r\nexport function PlanetView({ planet }: { planet: Planet }) {\r\n    let name = planet.name;\r\n    if (!planet.research || !planet.research.discovered) {\r\n        name = \"Undiscovered object\";\r\n    }\r\n\r\n    return (\r\n        <Block>\r\n            <SectionHeader title={name} size={1.1} />\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n\r\n                <PlanetBallView planet={planet} />\r\n\r\n                <div>\r\n                    <ResearchStat name=\"Mass\" unit=\"kg\" stat={planet.mass} studied={!!planet.research?.studied && planet.research?.studied != 'none'} />\r\n                    <ResearchStat name=\"Diameter\" unit=\"km\" stat={planet.diameter} studied={!!planet.research?.studied} />\r\n                    <ResearchStat name=\"Type\" stat={planet.type} studied={!!planet.research?.studied} />\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {planet.research?.discovered || planet.research?.studied === \"none\" ?\r\n                \"discovered\"\r\n                :\r\n                <QueuedBlockingAction\r\n                    name={`Study ${planet.name || name}`}\r\n                    description={`Use your telescope to study the unkown object and learn more about it. Earns 1 ${R_ICON}`}\r\n                    queue={TelescopeQueue}\r\n                    time={3 * MONTH}\r\n                    buyText=\"Study\"\r\n                    onComplete={() => {\r\n                        planet.research = planet.research || {} as any;\r\n                        planet.research!.discovered = true;\r\n                        planet.research!.studied = \"telescope\";\r\n                        Research.Add(1);\r\n                    }}\r\n                />\r\n            }\r\n        </Block>\r\n    );\r\n}\r\n\r\n\r\n","C:\\Users\\Alex\\universal\\src\\components\\ball.tsx",["89","90"],"import React from 'react';\r\nimport { Planet, SpaceObject } from '../stuff/universe';\r\n\r\nexport function BallView({ obj, size = 100, blur = 0 }: { obj: SpaceObject, blur?: number, size?: number }) {\r\n    return (\r\n        <div style={{ position: \"relative\" }}>\r\n            <div style={{\r\n                margin: 10,\r\n                backgroundColor: obj.img ? undefined : obj.color,\r\n                borderRadius: \"100%\",\r\n                height: size,\r\n                width: size,\r\n                filter: blur ? `blur(${blur}px)` : undefined,\r\n            }}>\r\n                {obj.img ? <img src={obj.img} height={size} width={size} /> : null}\r\n            </div>\r\n            {blur ? <div style={{  position: \"absolute\", top: 'calc(50% - 20px)', left: 'calc(50% - 15px)', fontSize: 30 }}>❔</div> : null}\r\n        </div>\r\n    );\r\n}",["91","92"],"C:\\Users\\Alex\\universal\\src\\simplified\\galaxy.ts",[],"C:\\Users\\Alex\\universal\\src\\stuff\\tasks.ts",[],"C:\\Users\\Alex\\universal\\src\\simplified\\probe.ts",[],"C:\\Users\\Alex\\universal\\src\\stages\\SolarSystem.tsx",["93","94","95","96","97","98"],"C:\\Users\\Alex\\universal\\src\\stuff\\universe.ts",[],"C:\\Users\\Alex\\universal\\src\\components\\tabs.tsx",[],"C:\\Users\\Alex\\universal\\src\\components\\system.tsx",[],"C:\\Users\\Alex\\universal\\src\\setter.tsx",["99"],"import { ROUND } from \"./stuff/universe\";\r\n\r\nexport class Setter {\r\n    constructor(private value: number, private icon_ = '') { }\r\n\r\n    onChange = (newValue: number) => { }\r\n\r\n    Register(onChange: (newValue: number) => void) {\r\n        this.onChange = onChange;\r\n    }\r\n\r\n    get current() {\r\n        return this.value;\r\n    }\r\n\r\n    get icon(){\r\n        return this.icon_;\r\n    }\r\n\r\n    Display():string {\r\n        return ROUND(this.value) + this.icon;\r\n    }\r\n\r\n    Set(v: number) {\r\n        this.value = v;\r\n        this.onChange(this.value);\r\n    }\r\n\r\n    Add(v: number) {\r\n        this.value += v;\r\n        this.onChange(this.value);\r\n    }\r\n\r\n    Subtract(v: number) {\r\n        this.value -= v;\r\n        this.onChange(this.value);\r\n    }\r\n}\r\n\r\nexport const MONTH = 1/12;\r\nexport class DateSetter extends Setter {\r\n    static Months = [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec',\r\n    ];\r\n\r\n    AsDate(){\r\n       return AsDate(this.current, this.icon);\r\n    }\r\n\r\n    get date(){\r\n        return this.AsDate();\r\n    }\r\n\r\n    AddMonth(){\r\n        this.Add(MONTH);\r\n    }\r\n    AddYear(){\r\n        this.Add(1);\r\n    }\r\n\r\n    constructor(value = 1980, icon = '📅'){\r\n        super(value, icon);\r\n    }\r\n}\r\n\r\nexport function AsDate(year: number, icon = '📅'){\r\n    const whole = Math.floor(year);\r\n    const fraction = year - whole;\r\n    const month = Math.floor(fraction * 12);\r\n    const name = DateSetter.Months[month];\r\n    return `${whole}-${EnsureDigits(month+1)} ${icon}`;\r\n}\r\n\r\nexport function EnsureDigits(n: number){\r\n    if(n < 10){\r\n        return '0' + n;\r\n    }\r\n    return '' + n;\r\n}","C:\\Users\\Alex\\universal\\src\\stages\\EarthStage.tsx",["100","101","102"],"import React from 'react';\r\nimport { Earth } from './SolarSystem';\r\nimport { Budget, Money, Research, Year } from '../Resources';\r\nimport { PlanetView, StatRow } from '../components/planet';\r\nimport { Task, TaskQueue } from '../stuff/tasks';\r\nimport { Section } from '../components/section';\r\nimport { QueuedBlockingAction } from '../components/action';\r\nimport { MONTH } from '../setter';\r\n\r\n// manufacturing can only do 1 thing at a time globally\r\nexport const ManufacturingQueue = new TaskQueue(1, 1);\r\n\r\n// research queue can do one of each at a time\r\nexport const ResearchQueue = new TaskQueue(1);\r\n\r\n// probe queue can do all of the things\r\nexport const ProbeQueue = new TaskQueue();\r\n\r\n// telescope can only do 1 thing at a time!\r\nexport const TelescopeQueue = new TaskQueue(1, 1);\r\n\r\nexport function EarthStage(props: {}) {\r\n    return <Section title=\"Earth\">\r\n        <PlanetView planet={Earth} />\r\n\r\n        <div style={{ borderBottom: \"2px solid grey\" }}></div>\r\n        <Probes />\r\n        <EarthManufacturing />\r\n        <ResearchStore />\r\n    </Section>\r\n}\r\n\r\n// so we should have like a STORE\r\n\r\nexport function Probes(props: {}) {\r\n    return <Section title=\"Inventory\">\r\n        <div>\r\n            Ground telescopes available: {Earth.availableTelescopes?.filter(t => t.type == 'ground').length || 0} 🔭\r\n        </div>\r\n        <div>\r\n            Probes available: {Earth.availableProbes.length} 🛰️\r\n        </div>\r\n    </Section>\r\n}\r\n\r\nexport function EarthManufacturing(props: {}) {\r\n    // manufacturing has say... some fixed number of slots that can be used\r\n    return <Section title=\"Manufacture\">\r\n        {!Earth.availableTelescopes?.filter(t => t.type == 'ground').length ?\r\n            <QueuedBlockingAction\r\n                name=\"Ground telescope\"\r\n                description=\"Build a telescope on Earth to allow you to look at distant objects.\"\r\n                money={1}\r\n                time={2 * MONTH}\r\n                queue={ManufacturingQueue}\r\n                onComplete={() => {\r\n                    Earth.availableTelescopes = Earth.availableTelescopes || [];\r\n                    Earth.availableTelescopes!.push({ manufactureDate: Year.current, condition: 1, type: \"ground\", quality: \"blurry\" });\r\n                }}\r\n            /> :\r\n            <QueuedBlockingAction\r\n                name=\"Space probe\"\r\n                description=\"Build a probe that you can launch to other planets to perform research.\"\r\n                money={1}\r\n                time={1}\r\n                queue={ManufacturingQueue}\r\n                onComplete={() => {\r\n                    Earth.availableProbes.push({ manufactureDate: Year.current });\r\n                }}\r\n            />\r\n        }\r\n    </Section>\r\n}\r\n\r\n\r\n// so we should have like a STORE\r\n\r\nexport function ResearchStore(props: {}) {\r\n    return <Section title=\"Research\">\r\n        <QueuedBlockingAction\r\n            name=\"Raise funds\"\r\n            description={`Raise ${1} billion 💲`}\r\n            research={1}\r\n            time={.5}\r\n            queue={ResearchQueue}\r\n            onComplete={() => { Money.Add(1) }}\r\n            buyText=\"Start\"\r\n        />\r\n        <QueuedBlockingAction\r\n            name=\"Increase budget\"\r\n            description={`Increases the monthly budget by ${.1} billion 💲`}\r\n            money={1}\r\n            research={1}\r\n            time={.5}\r\n            queue={ResearchQueue}\r\n            onComplete={() => { Budget.Add(.1); }}\r\n        />\r\n    </Section>\r\n}\r\n\r\nexport function ResearchOption(props: { name: string, money?: number, research?: number, onBuy?: () => void }) {\r\n    const hasEnoughMoney = !props.money || Money.current >= props.money;\r\n    const hasEnoughResearch = !props.research || Research.current >= props.research;\r\n    const canAfford = hasEnoughMoney && hasEnoughResearch;\r\n\r\n    return <div style={{ margin: 10, padding: 10, border: \"2px solid grey\" }}>\r\n        <div>{props.name}</div>\r\n        <StatRow name=\"Money\" stat={props.money} unit={Money.icon} color={hasEnoughMoney ? undefined : \"red\"} />\r\n        <StatRow name=\"Research\" stat={props.research} unit={Research.icon} color={hasEnoughResearch ? undefined : \"red\"} />\r\n        <button\r\n            style={{ cursor: \"pointer\" }}\r\n            disabled={!canAfford}\r\n            onClick={() => {\r\n                if (Money.current >= (props.money || 0) && Research.current >= (props.research || 0)) {\r\n                    Money.Subtract(props.money || 0);\r\n                    Research.Subtract(props.research || 0);\r\n                    props.onBuy?.();\r\n                }\r\n            }}\r\n        >\r\n            Buy\r\n        </button>\r\n    </div>\r\n}","C:\\Users\\Alex\\universal\\src\\Resources.ts",[],"C:\\Users\\Alex\\universal\\src\\components\\section.tsx",["103","104"],"import React from 'react';\r\n\r\nexport const backgroundColor = \"grey\";\r\nexport const border = `2px solid ${backgroundColor}`;\r\nexport const margin = 5;\r\nexport const padding = margin;\r\nexport const marginTop = margin;\r\nexport const marginBottom = margin;\r\nexport const paddingBottom = margin;\r\nexport const titleFontSize = '125%';\r\n\r\nexport const Section: React.FC<{ title: string, unlocked?: boolean }> = ({title, children, unlocked = true}) => {\r\n    return <div style={{ borderBottom: border, marginBottom, marginTop, paddingBottom }}>\r\n        <SectionHeader title={title} />\r\n        {unlocked ? children : \"Locked\"}\r\n    </div>;\r\n}\r\n\r\nexport function SectionHeader(props: { title?: string, size?: number }) {\r\n    return props.title && <div style={{ fontSize: props.size ? `${props.size * 100}%` : titleFontSize, marginBottom }}>\r\n        {props.title}\r\n    </div> || null;\r\n}\r\n\r\nexport const Block: React.FC<{ }> = ({children}) => {\r\n    return <div style={{padding, margin, border}}>\r\n        {children}\r\n    </div>;\r\n}","C:\\Users\\Alex\\universal\\src\\components\\action.tsx",["105"],"import React from 'react';\r\nimport { Money, Research, Year } from '../Resources';\r\nimport { Task, TaskQueue } from '../stuff/tasks';\r\nimport { StatRow } from './planet';\r\nimport { Block, border, backgroundColor, SectionHeader } from './section';\r\n\r\ninterface SimpleActionProps {\r\n    name: string,\r\n    description?: string,\r\n    money?: number,\r\n    research?: number,\r\n    time?: number,\r\n    onBuy?: () => void,\r\n    blocked?: string,\r\n    buyText?: string\r\n}\r\n\r\nexport const SimpleAction: React.FC<SimpleActionProps> = props => {\r\n    const hasEnoughMoney = !props.money || Money.current >= props.money;\r\n    const hasEnoughResearch = !props.research || Research.current >= props.research;\r\n    const canAfford = hasEnoughMoney && hasEnoughResearch;\r\n\r\n    return <Block>\r\n        <SectionHeader title={props.name} size={1.1} />\r\n        <SectionHeader title={props.description} size={.9} />\r\n        <StatRow name=\"Cost\" stat={props.money} unit={Money.icon} color={hasEnoughMoney ? undefined : \"red\"} />\r\n        <StatRow name=\"Research cost\" stat={props.research} unit={Research.icon} color={hasEnoughResearch ? undefined : \"red\"} />\r\n        <StatRow name=\"Build time\" stat={props.time} unit={\" year(s)\" + Year.icon} />\r\n        {props.children}\r\n        {props.blocked ? props.blocked : <button\r\n            style={{ cursor: \"pointer\" }}\r\n            disabled={!canAfford || !!props.blocked}\r\n            onClick={() => {\r\n                if (Money.current >= (props.money || 0) && Research.current >= (props.research || 0)) {\r\n                    Money.Subtract(props.money || 0);\r\n                    Research.Subtract(props.research || 0);\r\n                    props.onBuy?.();\r\n                }\r\n            }}\r\n        >{props.buyText || \"Buy\"}</button>}\r\n    </Block>\r\n}\r\n\r\nexport const TaskProgressBar: React.FC<{ task: Task }> = props => {\r\n    const progress = props.task.percent;\r\n    return <div style={{ border, backgroundColor, margin: 5 }}>\r\n        <div style={{ backgroundColor: \"green\", height: 20, width: props.task.percentWidth }}></div>\r\n    </div>\r\n}\r\n\r\ninterface QueuedBlockingActionProps extends Omit<SimpleActionProps, 'onBuy'> {\r\n    onComplete: () => void,\r\n    time: number,\r\n    queue: TaskQueue,\r\n    limitPerId?: number,\r\n    limitPerQueue?: number,\r\n}\r\n\r\nexport function QueuedBlockingAction(props: QueuedBlockingActionProps) {\r\n\r\n    // blocking can be some max # in the entire QUEUE\r\n    // or blocking can be some max # per unique ID/action in the QUEUE.\r\n    // for now lets do per QUEUE and per action\r\n    let blocked: string | undefined = undefined;\r\n    if (props.queue.limitPerQueue) {\r\n        if (props.queue.length >= props.queue.limitPerQueue) {\r\n            blocked = \"Queue is full.\";\r\n        }\r\n    }\r\n    if (props.queue.limitPerId) {\r\n        if (props.queue.count(props.name) >= props.queue.limitPerId) {\r\n            blocked = \"In progress...\";\r\n        }\r\n    }\r\n\r\n    return <SimpleAction\r\n        {...props}\r\n        blocked={blocked}\r\n        onBuy={() => {\r\n            return props.queue.push(\r\n                new Task(props.name, Year.current, Year.current + props.time, props.onComplete)\r\n            );\r\n        }}\r\n    >\r\n        {props.queue.get(props.name).map((t, i) => <TaskProgressBar task={t} key={i} />)}\r\n    </SimpleAction>\r\n}",{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":3,"column":30,"nodeType":"112","messageId":"113","endLine":3,"endColumn":40},{"ruleId":"110","severity":1,"message":"114","line":15,"column":10,"nodeType":"112","messageId":"113","endLine":15,"endColumn":14},{"ruleId":"110","severity":1,"message":"115","line":29,"column":10,"nodeType":"112","messageId":"113","endLine":29,"endColumn":22},{"ruleId":"110","severity":1,"message":"116","line":5,"column":10,"nodeType":"112","messageId":"113","endLine":5,"endColumn":24},{"ruleId":"117","severity":1,"message":"118","line":29,"column":23,"nodeType":"119","messageId":"120","endLine":29,"endColumn":25},{"ruleId":"117","severity":1,"message":"118","line":31,"column":12,"nodeType":"119","messageId":"120","endLine":31,"endColumn":14},{"ruleId":"121","severity":1,"message":"122","line":59,"column":53,"nodeType":"123","messageId":"124","endLine":59,"endColumn":55},{"ruleId":"121","severity":1,"message":"125","line":85,"column":140,"nodeType":"123","messageId":"124","endLine":85,"endColumn":142},{"ruleId":"110","severity":1,"message":"126","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":16},{"ruleId":"127","severity":1,"message":"128","line":15,"column":28,"nodeType":"129","endLine":15,"endColumn":76},{"ruleId":"106","replacedBy":"130"},{"ruleId":"108","replacedBy":"131"},{"ruleId":"110","severity":1,"message":"132","line":2,"column":22,"nodeType":"112","messageId":"113","endLine":2,"endColumn":37},{"ruleId":"110","severity":1,"message":"133","line":4,"column":10,"nodeType":"112","messageId":"113","endLine":4,"endColumn":15},{"ruleId":"110","severity":1,"message":"134","line":5,"column":43,"nodeType":"112","messageId":"113","endLine":5,"endColumn":48},{"ruleId":"110","severity":1,"message":"135","line":5,"column":50,"nodeType":"112","messageId":"113","endLine":5,"endColumn":61},{"ruleId":"110","severity":1,"message":"136","line":6,"column":10,"nodeType":"112","messageId":"113","endLine":6,"endColumn":24},{"ruleId":"110","severity":1,"message":"137","line":175,"column":11,"nodeType":"112","messageId":"113","endLine":175,"endColumn":21},{"ruleId":"110","severity":1,"message":"138","line":81,"column":11,"nodeType":"112","messageId":"113","endLine":81,"endColumn":15},{"ruleId":"110","severity":1,"message":"139","line":5,"column":10,"nodeType":"112","messageId":"113","endLine":5,"endColumn":14},{"ruleId":"121","severity":1,"message":"122","line":38,"column":89,"nodeType":"123","messageId":"124","endLine":38,"endColumn":91},{"ruleId":"121","severity":1,"message":"122","line":49,"column":57,"nodeType":"123","messageId":"124","endLine":49,"endColumn":59},{"ruleId":"117","severity":1,"message":"118","line":20,"column":24,"nodeType":"119","messageId":"120","endLine":20,"endColumn":26},{"ruleId":"117","severity":1,"message":"118","line":22,"column":12,"nodeType":"119","messageId":"120","endLine":22,"endColumn":14},{"ruleId":"110","severity":1,"message":"140","line":45,"column":11,"nodeType":"112","messageId":"113","endLine":45,"endColumn":19},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"@typescript-eslint/no-unused-vars","'EarthStage' is defined but never used.","Identifier","unusedVar","'year' is assigned a value but never used.","'queueChanger' is assigned a value but never used.","'PlanetResearch' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'Planet' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["141"],["142"],"'SpaceObjectView' is defined but never used.","'Money' is defined but never used.","'ROUND' is defined but never used.","'SpaceObject' is defined but never used.","'ResearchOption' is defined but never used.","'launchCost' is assigned a value but never used.","'name' is assigned a value but never used.","'Task' is defined but never used.","'progress' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]