[{"C:\\Users\\Alex\\universal\\src\\index.tsx":"1","C:\\Users\\Alex\\universal\\src\\reportWebVitals.ts":"2","C:\\Users\\Alex\\universal\\src\\App.tsx":"3","C:\\Users\\Alex\\universal\\src\\components\\planet.tsx":"4","C:\\Users\\Alex\\universal\\src\\components\\ball.tsx":"5","C:\\Users\\Alex\\universal\\src\\simplified\\galaxy.ts":"6","C:\\Users\\Alex\\universal\\src\\stuff\\tasks.ts":"7","C:\\Users\\Alex\\universal\\src\\simplified\\probe.ts":"8","C:\\Users\\Alex\\universal\\src\\stages\\SolarSystem.tsx":"9","C:\\Users\\Alex\\universal\\src\\stuff\\universe.ts":"10","C:\\Users\\Alex\\universal\\src\\components\\tabs.tsx":"11","C:\\Users\\Alex\\universal\\src\\components\\system.tsx":"12","C:\\Users\\Alex\\universal\\src\\setter.tsx":"13","C:\\Users\\Alex\\universal\\src\\stages\\EarthStage.tsx":"14","C:\\Users\\Alex\\universal\\src\\Resources.ts":"15","C:\\Users\\Alex\\universal\\src\\components\\section.tsx":"16","C:\\Users\\Alex\\universal\\src\\components\\action.tsx":"17","C:\\Users\\Alex\\universal\\src\\stuff\\tech.ts":"18","C:\\Users\\Alex\\universal\\src\\components\\galaxy.tsx":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":4104,"mtime":1624458821561,"results":"23","hashOfConfig":"21"},{"size":5444,"mtime":1610302218472,"results":"24","hashOfConfig":"21"},{"size":837,"mtime":1609950250362,"results":"25","hashOfConfig":"21"},{"size":1989,"mtime":1609944809825,"results":"26","hashOfConfig":"21"},{"size":3217,"mtime":1610295602417,"results":"27","hashOfConfig":"21"},{"size":753,"mtime":1609809184989,"results":"28","hashOfConfig":"21"},{"size":6752,"mtime":1609995663449,"results":"29","hashOfConfig":"21"},{"size":2574,"mtime":1609963791138,"results":"30","hashOfConfig":"21"},{"size":1283,"mtime":1610005417080,"results":"31","hashOfConfig":"21"},{"size":1905,"mtime":1609911276437,"results":"32","hashOfConfig":"21"},{"size":1782,"mtime":1610296005776,"results":"33","hashOfConfig":"21"},{"size":4680,"mtime":1610005198281,"results":"34","hashOfConfig":"21"},{"size":1945,"mtime":1610296982737,"results":"35","hashOfConfig":"21"},{"size":1025,"mtime":1609943353083,"results":"36","hashOfConfig":"21"},{"size":3421,"mtime":1610302254513,"results":"37","hashOfConfig":"21"},{"size":2233,"mtime":1610301543854,"results":"38","hashOfConfig":"21"},{"size":1545,"mtime":1624459985764,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1npj9no",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Alex\\universal\\src\\index.tsx",[],["87","88"],"C:\\Users\\Alex\\universal\\src\\reportWebVitals.ts",[],"C:\\Users\\Alex\\universal\\src\\App.tsx",["89"],"C:\\Users\\Alex\\universal\\src\\components\\planet.tsx",["90","91","92","93","94","95","96"],"import React from 'react';\r\nimport { Research, R_ICON } from '../Resources';\r\nimport { MONTH } from '../setter';\r\nimport { Earth, PlanetResearch } from '../stages/SolarSystem';\r\nimport { ProbeQueue, TelescopeQueue } from '../stuff/tasks';\r\nimport { Planet, ROUND, SpaceObject } from '../stuff/universe';\r\nimport { QueuedBlockingAction } from './action';\r\nimport { BallView } from './ball';\r\nimport { Block, SectionHeader } from './section';\r\n\r\nfunction randomNumber() {\r\n    return Math.round(Math.random() * 1000);\r\n}\r\n\r\nfunction randomLetter() {\r\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    return chars.charAt(Math.floor(Math.random() * 26));\r\n}\r\n\r\nfunction createName() {\r\n    return `Planet ${randomLetter()}${randomLetter()}_${randomNumber()}_${randomLetter}`;\r\n}\r\n\r\nexport function StatRow(props: { color?: string, name: string, stat?: number | string, unit?: string, round?: number }) {\r\n    let displayValue = props.stat;\r\n    if (props.stat && !isNaN(props.stat as any)) {\r\n        displayValue = ROUND(Number(props.stat), props.round || 100);\r\n    }\r\n    return props.stat && <div style={{ color: props.color }}>\r\n        {props.name}: {displayValue}{props.unit}\r\n    </div> || null;\r\n}\r\n\r\nexport function SpaceObjectView({ planet }: { planet: SpaceObject | Planet }) {\r\n    const [name] = React.useState(planet.name || createName());\r\n\r\n    return (\r\n        <div style={{ padding: 10 }}>\r\n            <div style={{ fontSize: \"calc(10px + 1vmin)\" }}>{name}</div>\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n\r\n                <BallView obj={planet} />\r\n\r\n                <div>\r\n                    <StatRow name=\"Mass\" unit=\"kg\" stat={planet.mass} />\r\n                    <StatRow name=\"Diameter\" unit=\"km\" stat={planet.diameter} />\r\n                    <StatRow name=\"Distance from star\" unit=\"km\" stat={(planet as Planet).distance} />\r\n                    <StatRow name=\"Type\" stat={(planet as any).type} />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function PlanetBallView({ planet }: { planet: Planet }) {\r\n    let blur = 0;\r\n    let obj = { ...planet };\r\n    if (!planet.research || planet.research.picture == \"none\") {\r\n        delete obj.img;\r\n        blur = 5;\r\n    }\r\n    return <BallView obj={obj} blur={blur} />\r\n}\r\n\r\nexport function ResearchStat({ name, unit, stat, studied = true }: { stat?: string | number, studied?: boolean, name: string, unit?: string }) {\r\n    return <StatRow name={name} unit={unit} stat={studied ? stat : \"?\"} />;\r\n\r\n}\r\n\r\nexport function PlanetView({ planet }: { planet: Planet }) {\r\n    let name = planet.name;\r\n    if (!planet.research || !planet.research.discovered) {\r\n        name = \"Undiscovered object\";\r\n    }\r\n\r\n    return (\r\n        <Block>\r\n            <SectionHeader title={name} size={1.1} />\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n\r\n                <PlanetBallView planet={planet} />\r\n\r\n                <div>\r\n                    <ResearchStat name=\"Mass\" unit=\"kg\" stat={planet.mass} studied={!!planet.research?.studied && planet.research?.studied != 'none'} />\r\n                    <ResearchStat name=\"Diameter\" unit=\"km\" stat={planet.diameter} studied={!!planet.research?.studied} />\r\n                    <ResearchStat name=\"Type\" stat={planet.type} studied={!!planet.research?.studied} />\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div>Satellites around planet: {planet.availableProbes.length}</div>\r\n\r\n            {planet.research?.discovered || planet.research?.studied === \"none\" ?\r\n                <QueuedBlockingAction\r\n                    name={`Launch satellite to ${planet.name}`}\r\n                    description={`Launch a satellite to be able to do research around ${planet.name} from orbit.`}\r\n                    queue={ProbeQueue}\r\n                    blocked={Earth.availableProbes.length >= 1 ? undefined : \"No available probes\"}\r\n                    time={Math.abs(planet.distance - Earth.distance) / 8.76e7}\r\n                    buyText=\"Launch\"\r\n                    onStart={() => {\r\n                        const probe = Earth.availableProbes.pop();\r\n                        if (!probe) { throw \"hey no probe!\"; }\r\n                        planet.incomingProbes.push(probe);\r\n                        return probe;\r\n                    }}\r\n                    onComplete={(probe) => {\r\n                        if (!probe) { throw \"HEY! No probe!\"; }\r\n                        Research.Add(1);\r\n                        planet.availableProbes.push(probe!);\r\n                        planet.incomingProbes = planet.incomingProbes.filter(p => p !== probe);\r\n                    }}\r\n                />\r\n                :\r\n                <QueuedBlockingAction\r\n                    name={`Study ${planet.name || name}`}\r\n                    description={`Use your telescope to study the unkown object and learn more about it. Earns 1 ${R_ICON}`}\r\n                    queue={TelescopeQueue}\r\n                    time={3 * MONTH}\r\n                    buyText=\"Study\"\r\n                    onComplete={() => {\r\n                        planet.research = planet.research || {} as any;\r\n                        planet.research!.discovered = true;\r\n                        planet.research!.studied = \"telescope\";\r\n                        Research.Add(1);\r\n                    }}\r\n                />\r\n            }\r\n\r\n        </Block>\r\n    );\r\n}\r\n\r\n\r\n","C:\\Users\\Alex\\universal\\src\\components\\ball.tsx",["97","98"],"import React from 'react';\r\nimport { Planet, SpaceObject } from '../stuff/universe';\r\n\r\nexport function BallView({ obj, size = 100, blur = 0 }: { obj: SpaceObject, blur?: number, size?: number }) {\r\n    return (\r\n        <div style={{ position: \"relative\" }}>\r\n            <div style={{\r\n                margin: 10,\r\n                backgroundColor: obj.img ? undefined : obj.color,\r\n                borderRadius: \"100%\",\r\n                height: size,\r\n                width: size,\r\n                filter: blur ? `blur(${blur}px)` : undefined,\r\n            }}>\r\n                {obj.img ? <img src={obj.img} height={size} width={size} /> : null}\r\n            </div>\r\n            {blur ? <div style={{  position: \"absolute\", top: 'calc(50% - 20px)', left: 'calc(50% - 15px)', fontSize: 30 }}>❔</div> : null}\r\n        </div>\r\n    );\r\n}","C:\\Users\\Alex\\universal\\src\\simplified\\galaxy.ts",[],"C:\\Users\\Alex\\universal\\src\\stuff\\tasks.ts",[],"C:\\Users\\Alex\\universal\\src\\simplified\\probe.ts",[],"C:\\Users\\Alex\\universal\\src\\stages\\SolarSystem.tsx",["99","100","101","102","103","104"],"import React from \"react\";\r\nimport { PlanetView, SpaceObjectView, StatRow } from \"../components/planet\";\r\nimport { System } from \"../components/system\";\r\nimport { Money, Year } from \"../Resources\";\r\nimport { BILLION, MILLION, Planet, Probe, ROUND, SpaceObject, Star } from \"../stuff/universe\";\r\nimport { ResearchOption } from \"./EarthStage\";\r\nimport mercuryimg from \"../images/mercuryimg.png\";\r\nimport earthimg from \"../images/earthimg.png\";\r\nimport moonimg from \"../images/moonimg.png\";\r\nimport { Tabs } from \"../components/tabs\";\r\n\r\nexport const Mercury: Planet = {\r\n    name: \"Mercury\",\r\n    img: mercuryimg,\r\n    color: \"grey\",\r\n    age: 4 * BILLION,\r\n    distance: 61.157 * MILLION,\r\n    type: \"rocky\",\r\n    diameter: 4879,\r\n    mass: 3.285e23,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Venus: Planet = {\r\n    name: \"Venus\",\r\n    color: \"bisque\",\r\n    age: 4 * BILLION,\r\n    distance: 108.44 * MILLION,\r\n    type: \"venuslike\",\r\n    diameter: 12104,\r\n    mass: 4.867e24,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Moon: Planet = {\r\n    name: \"Moon\",\r\n    img: moonimg,\r\n    color: \"grey\",\r\n    age: 4 * BILLION,\r\n    distance: 384400,\r\n    type: \"rocky\",\r\n    diameter: 3474,\r\n    mass: 7.348e22,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Earth: Planet = {\r\n    name: \"Earth\",\r\n    img: earthimg,\r\n    color: \"#18F\",\r\n    age: 4 * BILLION,\r\n    distance: 149.6 * MILLION,\r\n    type: \"rocky\",\r\n    diameter: 12742,\r\n    mass: 5.972e24,\r\n    percentUtilization: .5,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: [],\r\n    moons: [Moon],\r\n    research: {\r\n        discovered: true,\r\n        studied: \"human\",\r\n        picture: \"none\",\r\n        temperature: \"human\",\r\n        soil: \"human\",\r\n        water: \"human\",\r\n        atmosphere: \"human\",\r\n    }\r\n};\r\n\r\nexport const Mars: Planet = {\r\n    name: \"Mars\",\r\n    color: \"red\",\r\n    age: 4 * BILLION,\r\n    distance: 228.16 * MILLION,\r\n    type: \"rocky\",\r\n    diameter: 6779,\r\n    mass: 6.39e23,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\n\r\nexport const Jupiter: Planet = {\r\n    name: \"Jupiter\",\r\n    color: \"orange\",\r\n    age: 4 * BILLION,\r\n    distance: 762.51 * MILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 139820,\r\n    mass: 1.898e27,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Saturn: Planet = {\r\n    name: \"Saturn\",\r\n    color: \"tan\",\r\n    age: 4 * BILLION,\r\n    distance: 926.57 * MILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 116360,\r\n    mass: 5.683e26,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Uranus: Planet = {\r\n    name: \"Uranus\",\r\n    color: \"lightblue\",\r\n    age: 4 * BILLION,\r\n    distance: 2.9575 * BILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 50724,\r\n    mass: 8.681e25,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Neptune: Planet = {\r\n    name: \"Neptune\",\r\n    color: \"blue\",\r\n    age: 4 * BILLION,\r\n    distance: 4.4759 * BILLION,\r\n    type: \"gasgiant\",\r\n    diameter: 49244,\r\n    mass: 1.024e26,\r\n    percentUtilization: 0,\r\n    fullyUtilized: false,\r\n    availableProbes: [],\r\n    incomingProbes: []\r\n};\r\n\r\nexport const Sun = {\r\n    name: \"Sun\",\r\n    color: \"yellow\",\r\n    age: 4.5 * BILLION,\r\n    distance: 0,\r\n    type: \"sunlike\",\r\n    death: 7.5 * BILLION,\r\n    mass: 1.989e30, // KG\r\n    diameter: 1391000, // KM\r\n    incomingProbes: [],\r\n    planets: [\r\n        Mercury,\r\n        Venus,\r\n        Earth,\r\n        Mars,\r\n        Jupiter,\r\n        Saturn,\r\n        Uranus,\r\n        Neptune,\r\n    ],\r\n} as Star;\r\n\r\nexport function SolarSystem(props: { star: Star }) {\r\n    const launchCost = .1;\r\n    return <div>\r\n        <div style={{ position: \"relative\" }}>\r\n            <System star={props.star} />\r\n        </div>\r\n\r\n        <Tabs tabs={\r\n            [\r\n                {\r\n                    title: \"Sun\",\r\n                    content: <PlanetView planet={props.star as any} />\r\n                } ,\r\n                ...props.star.planets.map(p => ({\r\n                    title: p.name && p.research?.discovered ? p.name :\"?\",\r\n                    content: <div>\r\n                        <PlanetView planet={p} />\r\n                        \r\n                    </div>\r\n                }))\r\n            ]\r\n        } />\r\n\r\n    </div>\r\n}\r\n/*\r\n{p.incomingProbes.map(probe => <ProbeView probe={probe} />)}\r\n{p !== Earth ?\r\n    <button\r\n        style={{ cursor: \"pointer\" }}\r\n        disabled={Earth.availableProbes.length === 0 || Money.current < launchCost}\r\n        onClick={() => {\r\n            const probe = Earth.availableProbes.pop()!;\r\n            probe.launchYear = Year.current;\r\n            probe.arrivalYear = Year.current + Math.abs(p.distance - Earth.distance) / 8.76e7;\r\n            p.incomingProbes.push(probe);\r\n            Money.Subtract(launchCost);\r\n        }}\r\n    >Launch probe\r\n    ({launchCost} billion {Money.icon})\r\n    ({ROUND(Math.abs(p.distance - Earth.distance) / 8.76e7)} years)\r\n    </button>\r\n    : null}\r\n    */\r\n\r\nexport function ProbeView({ probe }: { probe: Probe }) {\r\n    return <div>\r\n        <div>🛰️</div>\r\n        <StatRow name=\"Launched\" stat={probe.launchYear} round={1} />\r\n        <StatRow name={probe.arrivalYear! < Year.current ? \"Arrived\" : \"Arriving\"} stat={probe.arrivalYear} round={1} />\r\n        <ProbeProgressBar probe={probe} />\r\n    </div>\r\n}\r\n\r\nexport function ProbeProgressBar({ probe }: { probe: Probe }) {\r\n    if (Year.current > probe.arrivalYear! + 5) { return null; }\r\n    let color = \"red\";\r\n    if (Year.current > probe.arrivalYear!) { color = \"green\"; }\r\n    const progress = (probe.arrivalYear! - Year.current) / (probe.arrivalYear! - probe.launchYear!);\r\n    return <div style={{ display: \"flex\", marginRight: 10, backgroundColor: \"grey\" }}>\r\n        <div style={{ width: (100 - (progress * 100)) + \"%\", height: 10, backgroundColor: color }}></div>\r\n    </div>\r\n}\r\n\r\n// this defines what we have actually DISCOVERED and sent there.\r\nexport type level = \"none\" | \"telescope\" | \"probe\" | \"lander\" | \"returned sample\" | \"human\";\r\nexport interface PlanetResearch {\r\n    /** This starts false */\r\n    discovered: boolean,\r\n\r\n    /** after study, you can now send probes there, etc */\r\n    studied: level,\r\n\r\n    picture: level,\r\n    temperature: level,\r\n    atmosphere: level,\r\n    soil: level,\r\n    water: level,\r\n}","C:\\Users\\Alex\\universal\\src\\stuff\\universe.ts",[],"C:\\Users\\Alex\\universal\\src\\components\\tabs.tsx",[],"C:\\Users\\Alex\\universal\\src\\components\\system.tsx",[],"C:\\Users\\Alex\\universal\\src\\setter.tsx",["105"],"import { ROUND } from \"./stuff/universe\";\r\n\r\nexport class Setter {\r\n    constructor(private value: number, private icon_ = '') { }\r\n\r\n    onChange = (newValue: number) => { }\r\n\r\n    Register(onChange: (newValue: number) => void) {\r\n        this.onChange = onChange;\r\n    }\r\n\r\n    get current() {\r\n        return this.value;\r\n    }\r\n\r\n    get icon(){\r\n        return this.icon_;\r\n    }\r\n\r\n    Display():string {\r\n        return ROUND(this.value) + this.icon;\r\n    }\r\n\r\n    Set(v: number) {\r\n        this.value = v;\r\n        this.onChange(this.value);\r\n    }\r\n\r\n    Add(v: number) {\r\n        this.value += v;\r\n        this.onChange(this.value);\r\n    }\r\n\r\n    Subtract(v: number) { \r\n        this.value -= v;\r\n        this.onChange(this.value);\r\n    }\r\n}\r\n\r\nexport const DAY = 1/365;\r\nexport const MONTH = 1/12;\r\nexport class DateSetter extends Setter {\r\n    static Months = [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec',\r\n    ];\r\n\r\n    AsDate(){\r\n       return AsDate(this.current, this.icon);\r\n    }\r\n\r\n    get date(){\r\n        return this.AsDate();\r\n    }\r\n\r\n    AddMonth(){\r\n        this.Add(MONTH);\r\n    }\r\n    AddYear(){\r\n        this.Add(1);\r\n    }\r\n\r\n    constructor(value = 1980, icon = '📅'){\r\n        super(value, icon);\r\n    }\r\n}\r\n\r\nexport function AsDate(year: number, icon = '📅'){\r\n    const whole = Math.floor(year);\r\n    const fraction = year - whole;\r\n    const month = Math.floor(fraction * 12);\r\n    const name = DateSetter.Months[month];\r\n    return `${whole}-${EnsureDigits(month+1)} ${icon}`;\r\n}\r\n\r\nexport function EnsureDigits(n: number){\r\n    if(n < 10){\r\n        return '0' + n;\r\n    }\r\n    return '' + n;\r\n}","C:\\Users\\Alex\\universal\\src\\stages\\EarthStage.tsx",["106","107","108","109","110"],"import React from 'react';\r\nimport { Earth } from './SolarSystem';\r\nimport { Budget, Money, Research, Year } from '../Resources';\r\nimport { PlanetView, StatRow } from '../components/planet';\r\nimport { ManufacturingQueue, ResearchQueue, Task, TaskQueue } from '../stuff/tasks';\r\nimport { Section } from '../components/section';\r\nimport { QueuedBlockingAction } from '../components/action';\r\nimport { MONTH } from '../setter';\r\nimport { Tech } from '../stuff/tech';\r\n\r\nexport function EarthStage(props: {}) {\r\n    return <Section title=\"Earth\">\r\n        <PlanetView planet={Earth} />\r\n\r\n        <div style={{ borderBottom: \"2px solid grey\" }}></div>\r\n        <Probes />\r\n        <EarthManufacturing />\r\n        <ResearchStore />\r\n    </Section>\r\n}\r\n\r\n// so we should have like a STORE\r\n\r\nexport function Probes(props: {}) {\r\n    return <Section title=\"Inventory\">\r\n        <div>\r\n            Ground telescopes available: {Earth.availableTelescopes?.filter(t => t.type == 'ground').length || 0} 🔭\r\n        </div>\r\n        <div>\r\n            Probes available: {Earth.availableProbes.length} 🛰️\r\n        </div>\r\n    </Section>\r\n}\r\n\r\nexport function EarthManufacturing(props: {}) {\r\n    // manufacturing has say... some fixed number of slots that can be used\r\n    return <Section title=\"Manufacture\">\r\n        {!Earth.availableTelescopes?.filter(t => t.type == 'ground').length ?\r\n            <QueuedBlockingAction\r\n                name=\"Ground telescope\"\r\n                description=\"Build a telescope on Earth to allow you to look at distant objects.\"\r\n                money={1}\r\n                time={2 * MONTH}\r\n                queue={ManufacturingQueue}\r\n                onComplete={() => {\r\n                    Earth.availableTelescopes = Earth.availableTelescopes || [];\r\n                    Earth.availableTelescopes!.push({ manufactureDate: Year.current, condition: 1, type: \"ground\", quality: \"blurry\" });\r\n                }}\r\n            /> :\r\n            <QueuedBlockingAction\r\n                name=\"Space probe\"\r\n                description=\"Build a probe that you can launch to other planets to perform research.\"\r\n                money={1}\r\n                time={1}\r\n                queue={ManufacturingQueue}\r\n                onComplete={() => {\r\n                    Earth.availableProbes.push({ manufactureDate: Year.current });\r\n                }}\r\n            />\r\n        }\r\n    </Section>\r\n}\r\n\r\n\r\n// so we should have like a STORE\r\n\r\nexport function ResearchStore(props: {}) {\r\n    const moneyStuff = <>\r\n        <QueuedBlockingAction\r\n            name=\"Raise funds\"\r\n            description={`Raise ${1} billion 💲`}\r\n            research={1}\r\n            time={.5}\r\n            queue={ResearchQueue}\r\n            onComplete={() => { Money.Add(1) }}\r\n            buyText=\"Start\"\r\n        />\r\n        <QueuedBlockingAction\r\n            name=\"Increase budget\"\r\n            description={`Increases the monthly budget by ${.1} billion 💲`}\r\n            money={1}\r\n            research={1}\r\n            time={.5}\r\n            queue={ResearchQueue}\r\n            onComplete={() => { Budget.Add(.1); }}\r\n        />\r\n    </>;\r\n    return <Section title=\"Research\">\r\n        {Tech.All.filter(tech => tech.canBuy && !tech.unlocked).map(tech => <QueuedBlockingAction\r\n            name={tech.id}\r\n            onComplete={() => { tech.unlock() }}\r\n            queue={ResearchQueue}\r\n            time={tech.researchTime}\r\n            research={tech.researchCost}\r\n        />)}\r\n    </Section>\r\n}\r\n\r\nexport function ResearchOption(props: { name: string, money?: number, research?: number, onBuy?: () => void }) {\r\n    const hasEnoughMoney = !props.money || Money.current >= props.money;\r\n    const hasEnoughResearch = !props.research || Research.current >= props.research;\r\n    const canAfford = hasEnoughMoney && hasEnoughResearch;\r\n\r\n    return <div style={{ margin: 10, padding: 10, border: \"2px solid grey\" }}>\r\n        <div>{props.name}</div>\r\n        <StatRow name=\"Money\" stat={props.money} unit={Money.icon} color={hasEnoughMoney ? undefined : \"red\"} />\r\n        <StatRow name=\"Research\" stat={props.research} unit={Research.icon} color={hasEnoughResearch ? undefined : \"red\"} />\r\n        <button\r\n            style={{ cursor: \"pointer\" }}\r\n            disabled={!canAfford}\r\n            onClick={() => {\r\n                if (Money.current >= (props.money || 0) && Research.current >= (props.research || 0)) {\r\n                    Money.Subtract(props.money || 0);\r\n                    Research.Subtract(props.research || 0);\r\n                    props.onBuy?.();\r\n                }\r\n            }}\r\n        >\r\n            Buy\r\n        </button>\r\n    </div>\r\n}","C:\\Users\\Alex\\universal\\src\\Resources.ts",[],"C:\\Users\\Alex\\universal\\src\\components\\section.tsx",["111","112"],"import React from 'react';\r\n\r\nexport const backgroundColor = \"grey\";\r\nexport const border = `2px solid ${backgroundColor}`;\r\nexport const margin = 5;\r\nexport const padding = margin;\r\nexport const marginTop = margin;\r\nexport const marginBottom = margin;\r\nexport const paddingBottom = margin;\r\nexport const titleFontSize = '125%';\r\n\r\nexport const Section: React.FC<{ title: string, unlocked?: boolean }> = ({title, children, unlocked = true}) => {\r\n    return <div style={{ borderBottom: border, marginBottom, marginTop, paddingBottom }}>\r\n        <SectionHeader title={title} />\r\n        {unlocked ? children : \"Locked\"}\r\n    </div>;\r\n}\r\n\r\nexport function SectionHeader(props: { title?: string, size?: number }) {\r\n    return props.title && <div style={{ fontSize: props.size ? `${props.size * 100}%` : titleFontSize, marginBottom }}>\r\n        {props.title}\r\n    </div> || null;\r\n}\r\n\r\nexport const Block: React.FC<{ }> = ({children}) => {\r\n    return <div style={{padding, margin, border}}>\r\n        {children}\r\n    </div>;\r\n}","C:\\Users\\Alex\\universal\\src\\components\\action.tsx",["113"],"import React from 'react';\r\nimport { Money, Research, Year } from '../Resources';\r\nimport { Task, TaskQueue } from '../stuff/tasks';\r\nimport { StatRow } from './planet';\r\nimport { Block, border, backgroundColor, SectionHeader } from './section';\r\n\r\ninterface SimpleActionProps {\r\n    name: string,\r\n    description?: string,\r\n    money?: number,\r\n    research?: number,\r\n    time?: number,\r\n    onBuy?: () => void,\r\n    blocked?: string,\r\n    buyText?: string\r\n}\r\n\r\nexport const SimpleAction: React.FC<SimpleActionProps> = props => {\r\n    const hasEnoughMoney = !props.money || Money.current >= props.money;\r\n    const hasEnoughResearch = !props.research || Research.current >= props.research;\r\n    const canAfford = hasEnoughMoney && hasEnoughResearch;\r\n\r\n    return <Block>\r\n        <SectionHeader title={props.name} size={1.1} />\r\n        <SectionHeader title={props.description} size={.9} />\r\n        <StatRow name=\"Cost\" stat={props.money} unit={Money.icon} color={hasEnoughMoney ? undefined : \"red\"} />\r\n        <StatRow name=\"Research cost\" stat={props.research} unit={Research.icon} color={hasEnoughResearch ? undefined : \"red\"} />\r\n        <StatRow name=\"Build time\" stat={props.time} unit={\" year(s)\" + Year.icon} />\r\n        {props.children}\r\n        {props.blocked ? props.blocked : <button\r\n            style={{ cursor: \"pointer\" }}\r\n            disabled={!canAfford || !!props.blocked}\r\n            onClick={() => {\r\n                if (Money.current >= (props.money || 0) && Research.current >= (props.research || 0)) {\r\n                    Money.Subtract(props.money || 0);\r\n                    Research.Subtract(props.research || 0);\r\n                    props.onBuy?.();\r\n                }\r\n            }}\r\n        >{props.buyText || \"Buy\"}</button>}\r\n    </Block>\r\n}\r\n\r\nexport const TaskProgressBar: React.FC<{ task: Task }> = props => {\r\n    const progress = props.task.percent;\r\n    return <div style={{ border, backgroundColor, margin: 5 }}>\r\n        <div style={{ backgroundColor: \"green\", height: 20, width: props.task.percentWidth }}></div>\r\n    </div>\r\n}\r\n\r\ninterface QueuedBlockingActionProps<T> extends Omit<SimpleActionProps, 'onBuy'> {\r\n    onStart?: () => T | undefined,\r\n    onComplete: (data?: T) => void,\r\n    time: number,\r\n    queue: TaskQueue,\r\n    limitPerId?: number,\r\n    limitPerQueue?: number,\r\n}\r\n\r\nexport function QueuedBlockingAction<T>(props: QueuedBlockingActionProps<T>) {\r\n\r\n    // blocking can be some max # in the entire QUEUE\r\n    // or blocking can be some max # per unique ID/action in the QUEUE.\r\n    // for now lets do per QUEUE and per action\r\n    let blocked: string | undefined = props.blocked;\r\n    if (props.queue.limitPerQueue) {\r\n        if (props.queue.length >= props.queue.limitPerQueue) {\r\n            blocked = \"Queue is full.\";\r\n        }\r\n    }\r\n    if (props.queue.limitPerId) {\r\n        if (props.queue.count(props.name) >= props.queue.limitPerId) {\r\n            blocked = \"In progress...\";\r\n        }\r\n    }\r\n\r\n    return <SimpleAction\r\n        {...props}\r\n        blocked={blocked}\r\n        onBuy={() => {\r\n            const data = props.onStart?.();\r\n            return props.queue.push(\r\n                new Task(props.name, Year.current, Year.current + props.time, () => props.onComplete(data))\r\n            );\r\n        }}\r\n    >\r\n        {props.queue.get(props.name).map((t, i) => <TaskProgressBar task={t} key={i} />)}\r\n    </SimpleAction>\r\n}","C:\\Users\\Alex\\universal\\src\\stuff\\tech.ts",["114","115","116","117"],"import { MONTH } from \"../setter\";\r\n\r\nexport class Tech {\r\n    static All: Tech[] = [];\r\n    static Unlocked: Tech[] = [];\r\n    static IsUnlocked(tech: Tech) {\r\n        return !!Tech.Unlocked.find(t => t.id === tech.id)\r\n    }\r\n    ;\r\n\r\n    constructor(\r\n        public readonly id: string,\r\n        public readonly researchCost: number,\r\n        public readonly dependsOn: Tech[] = [],\r\n        public readonly researchTime = 1,\r\n    ) {\r\n        if (!Tech.All.find(t => t.id === this.id)) {\r\n            Tech.All.push(this);\r\n        }\r\n        else {\r\n            throw \"Hey! Duplicate tech!\" + id;\r\n        }\r\n    }\r\n\r\n    get canBuy() {\r\n        return this.dependsOn.filter(dep => dep.unlocked).length == this.dependsOn.length;\r\n    }\r\n\r\n    get unlocked() {\r\n        return Tech.IsUnlocked(this);\r\n    }\r\n\r\n    unlock() {\r\n        if (this.canBuy && !this.unlocked) {\r\n            Tech.Unlocked.push(this);\r\n        }\r\n    }\r\n}\r\n\r\n/** Builds a linear set of techs that depend on only the previous level. */\r\nexport function LinearTechLevels(name: string, levels: number): Tech[] {\r\n    let cost = 1; // Times 10 each time for now?\r\n    const result: Tech[] = [];\r\n    for (let i = 1; i <= levels; i++) {\r\n        result[i] = new Tech(\r\n            `${name} ${i}`,\r\n            Math.pow(10, i - 1),\r\n            i == 1 ? [] : [result[i - 1]],\r\n            Math.pow(10, i - 1) / 4);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// General Tech lines\r\nexport const Rockets = LinearTechLevels(\"Rockets\", 7);\r\nexport const Optics = LinearTechLevels(\"Optics\", 3);\r\nexport const Satelites = LinearTechLevels(\"Satellites\", 3);\r\nexport const Robotics = LinearTechLevels(\"Robotics\", 5);\r\n\r\n// Specific techs for building\r\nexport const GroundTelescope = new Tech(\"Ground Telescope\", 0, [Optics[1]], 6 * MONTH);\r\nexport const SpaceTelescope = new Tech(\"Space Telescope\", 10, [GroundTelescope, Rockets[2]]);\r\n\r\nSatelites[1].dependsOn.push(Rockets[1]);\r\nSatelites[2].dependsOn.push(Rockets[2], Optics[1]);\r\n\r\nexport const Probes = new Tech(\"Probes\", 1, [GroundTelescope, Rockets[1]]);\r\nexport const Lander = new Tech(\"Lander\", 10, [Probes]);\r\n\r\nexport const InterstellarTravel = new Tech(\"Interstellar travel\", 1000, [Rockets[5], GroundTelescope]);\r\n","C:\\Users\\Alex\\universal\\src\\components\\galaxy.tsx",["118","119","120"],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":8,"column":35,"nodeType":"127","messageId":"128","endLine":8,"endColumn":41},{"ruleId":"125","severity":1,"message":"129","line":4,"column":17,"nodeType":"127","messageId":"128","endLine":4,"endColumn":31},{"ruleId":"130","severity":1,"message":"131","line":29,"column":23,"nodeType":"132","messageId":"133","endLine":29,"endColumn":25},{"ruleId":"130","severity":1,"message":"131","line":31,"column":12,"nodeType":"132","messageId":"133","endLine":31,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":59,"column":53,"nodeType":"136","messageId":"137","endLine":59,"endColumn":55},{"ruleId":"134","severity":1,"message":"138","line":85,"column":140,"nodeType":"136","messageId":"137","endLine":85,"endColumn":142},{"ruleId":"139","severity":1,"message":"140","line":104,"column":39,"nodeType":"141","messageId":"142","endLine":104,"endColumn":61},{"ruleId":"139","severity":1,"message":"140","line":109,"column":39,"nodeType":"141","messageId":"142","endLine":109,"endColumn":62},{"ruleId":"125","severity":1,"message":"143","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":16},{"ruleId":"144","severity":1,"message":"145","line":15,"column":28,"nodeType":"146","endLine":15,"endColumn":76},{"ruleId":"125","severity":1,"message":"147","line":2,"column":22,"nodeType":"127","messageId":"128","endLine":2,"endColumn":37},{"ruleId":"125","severity":1,"message":"148","line":4,"column":10,"nodeType":"127","messageId":"128","endLine":4,"endColumn":15},{"ruleId":"125","severity":1,"message":"149","line":5,"column":43,"nodeType":"127","messageId":"128","endLine":5,"endColumn":48},{"ruleId":"125","severity":1,"message":"150","line":5,"column":50,"nodeType":"127","messageId":"128","endLine":5,"endColumn":61},{"ruleId":"125","severity":1,"message":"151","line":6,"column":10,"nodeType":"127","messageId":"128","endLine":6,"endColumn":24},{"ruleId":"125","severity":1,"message":"152","line":175,"column":11,"nodeType":"127","messageId":"128","endLine":175,"endColumn":21},{"ruleId":"125","severity":1,"message":"153","line":82,"column":11,"nodeType":"127","messageId":"128","endLine":82,"endColumn":15},{"ruleId":"125","severity":1,"message":"154","line":5,"column":45,"nodeType":"127","messageId":"128","endLine":5,"endColumn":49},{"ruleId":"125","severity":1,"message":"155","line":5,"column":51,"nodeType":"127","messageId":"128","endLine":5,"endColumn":60},{"ruleId":"134","severity":1,"message":"135","line":27,"column":89,"nodeType":"136","messageId":"137","endLine":27,"endColumn":91},{"ruleId":"134","severity":1,"message":"135","line":38,"column":57,"nodeType":"136","messageId":"137","endLine":38,"endColumn":59},{"ruleId":"125","severity":1,"message":"156","line":68,"column":11,"nodeType":"127","messageId":"128","endLine":68,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":20,"column":24,"nodeType":"132","messageId":"133","endLine":20,"endColumn":26},{"ruleId":"130","severity":1,"message":"131","line":22,"column":12,"nodeType":"132","messageId":"133","endLine":22,"endColumn":14},{"ruleId":"125","severity":1,"message":"157","line":45,"column":11,"nodeType":"127","messageId":"128","endLine":45,"endColumn":19},{"ruleId":"139","severity":1,"message":"140","line":21,"column":13,"nodeType":"141","messageId":"142","endLine":21,"endColumn":47},{"ruleId":"134","severity":1,"message":"135","line":26,"column":66,"nodeType":"136","messageId":"137","endLine":26,"endColumn":68},{"ruleId":"125","severity":1,"message":"158","line":42,"column":9,"nodeType":"127","messageId":"128","endLine":42,"endColumn":13},{"ruleId":"134","severity":1,"message":"135","line":48,"column":15,"nodeType":"136","messageId":"137","endLine":48,"endColumn":17},{"ruleId":"125","severity":1,"message":"159","line":8,"column":11,"nodeType":"127","messageId":"128","endLine":8,"endColumn":18},{"ruleId":"125","severity":1,"message":"160","line":9,"column":11,"nodeType":"127","messageId":"128","endLine":9,"endColumn":18},{"ruleId":"125","severity":1,"message":"161","line":19,"column":19,"nodeType":"127","messageId":"128","endLine":19,"endColumn":30},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"@typescript-eslint/no-unused-vars","'RunDay' is defined but never used.","Identifier","unusedVar","'PlanetResearch' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'Planet' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'SpaceObjectView' is defined but never used.","'Money' is defined but never used.","'ROUND' is defined but never used.","'SpaceObject' is defined but never used.","'ResearchOption' is defined but never used.","'launchCost' is assigned a value but never used.","'name' is assigned a value but never used.","'Task' is defined but never used.","'TaskQueue' is defined but never used.","'moneyStuff' is assigned a value but never used.","'progress' is assigned a value but never used.","'cost' is assigned a value but never used.","'centerH' is assigned a value but never used.","'centerW' is assigned a value but never used.","'galaxyWidth' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]